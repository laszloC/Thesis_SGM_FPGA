-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inverse_img is
generic (
    C_S_AXI_D_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_D_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_D_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_D_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_D_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_D_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_D_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_D_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_D_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_D_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_D_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_D_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_D_BUS_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_D_BUS_AWVALID : IN STD_LOGIC;
    s_axi_D_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_D_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_D_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_D_BUS_WVALID : IN STD_LOGIC;
    s_axi_D_BUS_WREADY : OUT STD_LOGIC;
    s_axi_D_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_D_BUS_DATA_WIDTH-1 downto 0);
    s_axi_D_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_D_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_D_BUS_ARVALID : IN STD_LOGIC;
    s_axi_D_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_D_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_D_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_D_BUS_RVALID : OUT STD_LOGIC;
    s_axi_D_BUS_RREADY : IN STD_LOGIC;
    s_axi_D_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_D_BUS_DATA_WIDTH-1 downto 0);
    s_axi_D_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_D_BUS_BVALID : OUT STD_LOGIC;
    s_axi_D_BUS_BREADY : IN STD_LOGIC;
    s_axi_D_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_D_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_D_BUS_AWREADY : IN STD_LOGIC;
    m_axi_D_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_D_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ID_WIDTH-1 downto 0);
    m_axi_D_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_D_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_D_BUS_WVALID : OUT STD_LOGIC;
    m_axi_D_BUS_WREADY : IN STD_LOGIC;
    m_axi_D_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_DATA_WIDTH-1 downto 0);
    m_axi_D_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_D_BUS_WLAST : OUT STD_LOGIC;
    m_axi_D_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ID_WIDTH-1 downto 0);
    m_axi_D_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_D_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_D_BUS_ARREADY : IN STD_LOGIC;
    m_axi_D_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_D_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ID_WIDTH-1 downto 0);
    m_axi_D_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_D_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_D_BUS_RVALID : IN STD_LOGIC;
    m_axi_D_BUS_RREADY : OUT STD_LOGIC;
    m_axi_D_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_D_BUS_DATA_WIDTH-1 downto 0);
    m_axi_D_BUS_RLAST : IN STD_LOGIC;
    m_axi_D_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ID_WIDTH-1 downto 0);
    m_axi_D_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_D_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_D_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_BUS_BVALID : IN STD_LOGIC;
    m_axi_D_BUS_BREADY : OUT STD_LOGIC;
    m_axi_D_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_D_BUS_ID_WIDTH-1 downto 0);
    m_axi_D_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_D_BUS_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of inverse_img is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inverse_img,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=676801,HLS_SYN_TPT=676802,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=859,HLS_SYN_LUT=1173,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal img_in : STD_LOGIC_VECTOR (31 downto 0);
    signal img_out : STD_LOGIC_VECTOR (31 downto 0);
    signal D_BUS_AWREADY : STD_LOGIC;
    signal D_BUS_WREADY : STD_LOGIC;
    signal D_BUS_ARREADY : STD_LOGIC;
    signal D_BUS_RVALID : STD_LOGIC;
    signal D_BUS_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal D_BUS_RLAST : STD_LOGIC;
    signal D_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal D_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal D_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal D_BUS_BVALID : STD_LOGIC;
    signal D_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal D_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal D_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_img_in_AWVALID : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_img_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_WVALID : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_img_in_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_WLAST : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_img_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARVALID : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_img_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_img_in_RREADY : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_img_in_BREADY : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;

    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_img_in_AWVALID : OUT STD_LOGIC;
        m_axi_img_in_AWREADY : IN STD_LOGIC;
        m_axi_img_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_img_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_img_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_img_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_img_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_img_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_img_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_img_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_img_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_img_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_WVALID : OUT STD_LOGIC;
        m_axi_img_in_WREADY : IN STD_LOGIC;
        m_axi_img_in_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_img_in_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_WLAST : OUT STD_LOGIC;
        m_axi_img_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_ARVALID : OUT STD_LOGIC;
        m_axi_img_in_ARREADY : IN STD_LOGIC;
        m_axi_img_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_img_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_img_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_img_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_img_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_img_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_img_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_img_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_img_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_img_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_RVALID : IN STD_LOGIC;
        m_axi_img_in_RREADY : OUT STD_LOGIC;
        m_axi_img_in_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_img_in_RLAST : IN STD_LOGIC;
        m_axi_img_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_img_in_BVALID : IN STD_LOGIC;
        m_axi_img_in_BREADY : OUT STD_LOGIC;
        m_axi_img_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_img_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_img_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        img_in_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        img_out_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inverse_img_D_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        img_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inverse_img_D_BUS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    inverse_img_D_BUS_s_axi_U : component inverse_img_D_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_D_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_D_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_D_BUS_AWVALID,
        AWREADY => s_axi_D_BUS_AWREADY,
        AWADDR => s_axi_D_BUS_AWADDR,
        WVALID => s_axi_D_BUS_WVALID,
        WREADY => s_axi_D_BUS_WREADY,
        WDATA => s_axi_D_BUS_WDATA,
        WSTRB => s_axi_D_BUS_WSTRB,
        ARVALID => s_axi_D_BUS_ARVALID,
        ARREADY => s_axi_D_BUS_ARREADY,
        ARADDR => s_axi_D_BUS_ARADDR,
        RVALID => s_axi_D_BUS_RVALID,
        RREADY => s_axi_D_BUS_RREADY,
        RDATA => s_axi_D_BUS_RDATA,
        RRESP => s_axi_D_BUS_RRESP,
        BVALID => s_axi_D_BUS_BVALID,
        BREADY => s_axi_D_BUS_BREADY,
        BRESP => s_axi_D_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        img_in => img_in,
        img_out => img_out);

    inverse_img_D_BUS_m_axi_U : component inverse_img_D_BUS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_D_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_D_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_D_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_D_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_D_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_D_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_D_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_D_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_D_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_D_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_D_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_D_BUS_AWVALID,
        AWREADY => m_axi_D_BUS_AWREADY,
        AWADDR => m_axi_D_BUS_AWADDR,
        AWID => m_axi_D_BUS_AWID,
        AWLEN => m_axi_D_BUS_AWLEN,
        AWSIZE => m_axi_D_BUS_AWSIZE,
        AWBURST => m_axi_D_BUS_AWBURST,
        AWLOCK => m_axi_D_BUS_AWLOCK,
        AWCACHE => m_axi_D_BUS_AWCACHE,
        AWPROT => m_axi_D_BUS_AWPROT,
        AWQOS => m_axi_D_BUS_AWQOS,
        AWREGION => m_axi_D_BUS_AWREGION,
        AWUSER => m_axi_D_BUS_AWUSER,
        WVALID => m_axi_D_BUS_WVALID,
        WREADY => m_axi_D_BUS_WREADY,
        WDATA => m_axi_D_BUS_WDATA,
        WSTRB => m_axi_D_BUS_WSTRB,
        WLAST => m_axi_D_BUS_WLAST,
        WID => m_axi_D_BUS_WID,
        WUSER => m_axi_D_BUS_WUSER,
        ARVALID => m_axi_D_BUS_ARVALID,
        ARREADY => m_axi_D_BUS_ARREADY,
        ARADDR => m_axi_D_BUS_ARADDR,
        ARID => m_axi_D_BUS_ARID,
        ARLEN => m_axi_D_BUS_ARLEN,
        ARSIZE => m_axi_D_BUS_ARSIZE,
        ARBURST => m_axi_D_BUS_ARBURST,
        ARLOCK => m_axi_D_BUS_ARLOCK,
        ARCACHE => m_axi_D_BUS_ARCACHE,
        ARPROT => m_axi_D_BUS_ARPROT,
        ARQOS => m_axi_D_BUS_ARQOS,
        ARREGION => m_axi_D_BUS_ARREGION,
        ARUSER => m_axi_D_BUS_ARUSER,
        RVALID => m_axi_D_BUS_RVALID,
        RREADY => m_axi_D_BUS_RREADY,
        RDATA => m_axi_D_BUS_RDATA,
        RLAST => m_axi_D_BUS_RLAST,
        RID => m_axi_D_BUS_RID,
        RUSER => m_axi_D_BUS_RUSER,
        RRESP => m_axi_D_BUS_RRESP,
        BVALID => m_axi_D_BUS_BVALID,
        BREADY => m_axi_D_BUS_BREADY,
        BRESP => m_axi_D_BUS_BRESP,
        BID => m_axi_D_BUS_BID,
        BUSER => m_axi_D_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Loop_1_proc_U0_m_axi_img_in_ARVALID,
        I_ARREADY => D_BUS_ARREADY,
        I_ARADDR => Loop_1_proc_U0_m_axi_img_in_ARADDR,
        I_ARID => Loop_1_proc_U0_m_axi_img_in_ARID,
        I_ARLEN => Loop_1_proc_U0_m_axi_img_in_ARLEN,
        I_ARSIZE => Loop_1_proc_U0_m_axi_img_in_ARSIZE,
        I_ARLOCK => Loop_1_proc_U0_m_axi_img_in_ARLOCK,
        I_ARCACHE => Loop_1_proc_U0_m_axi_img_in_ARCACHE,
        I_ARQOS => Loop_1_proc_U0_m_axi_img_in_ARQOS,
        I_ARPROT => Loop_1_proc_U0_m_axi_img_in_ARPROT,
        I_ARUSER => Loop_1_proc_U0_m_axi_img_in_ARUSER,
        I_ARBURST => Loop_1_proc_U0_m_axi_img_in_ARBURST,
        I_ARREGION => Loop_1_proc_U0_m_axi_img_in_ARREGION,
        I_RVALID => D_BUS_RVALID,
        I_RREADY => Loop_1_proc_U0_m_axi_img_in_RREADY,
        I_RDATA => D_BUS_RDATA,
        I_RID => D_BUS_RID,
        I_RUSER => D_BUS_RUSER,
        I_RRESP => D_BUS_RRESP,
        I_RLAST => D_BUS_RLAST,
        I_AWVALID => Loop_1_proc_U0_m_axi_img_in_AWVALID,
        I_AWREADY => D_BUS_AWREADY,
        I_AWADDR => Loop_1_proc_U0_m_axi_img_in_AWADDR,
        I_AWID => Loop_1_proc_U0_m_axi_img_in_AWID,
        I_AWLEN => Loop_1_proc_U0_m_axi_img_in_AWLEN,
        I_AWSIZE => Loop_1_proc_U0_m_axi_img_in_AWSIZE,
        I_AWLOCK => Loop_1_proc_U0_m_axi_img_in_AWLOCK,
        I_AWCACHE => Loop_1_proc_U0_m_axi_img_in_AWCACHE,
        I_AWQOS => Loop_1_proc_U0_m_axi_img_in_AWQOS,
        I_AWPROT => Loop_1_proc_U0_m_axi_img_in_AWPROT,
        I_AWUSER => Loop_1_proc_U0_m_axi_img_in_AWUSER,
        I_AWBURST => Loop_1_proc_U0_m_axi_img_in_AWBURST,
        I_AWREGION => Loop_1_proc_U0_m_axi_img_in_AWREGION,
        I_WVALID => Loop_1_proc_U0_m_axi_img_in_WVALID,
        I_WREADY => D_BUS_WREADY,
        I_WDATA => Loop_1_proc_U0_m_axi_img_in_WDATA,
        I_WID => Loop_1_proc_U0_m_axi_img_in_WID,
        I_WUSER => Loop_1_proc_U0_m_axi_img_in_WUSER,
        I_WLAST => Loop_1_proc_U0_m_axi_img_in_WLAST,
        I_WSTRB => Loop_1_proc_U0_m_axi_img_in_WSTRB,
        I_BVALID => D_BUS_BVALID,
        I_BREADY => Loop_1_proc_U0_m_axi_img_in_BREADY,
        I_BRESP => D_BUS_BRESP,
        I_BID => D_BUS_BID,
        I_BUSER => D_BUS_BUSER);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        m_axi_img_in_AWVALID => Loop_1_proc_U0_m_axi_img_in_AWVALID,
        m_axi_img_in_AWREADY => D_BUS_AWREADY,
        m_axi_img_in_AWADDR => Loop_1_proc_U0_m_axi_img_in_AWADDR,
        m_axi_img_in_AWID => Loop_1_proc_U0_m_axi_img_in_AWID,
        m_axi_img_in_AWLEN => Loop_1_proc_U0_m_axi_img_in_AWLEN,
        m_axi_img_in_AWSIZE => Loop_1_proc_U0_m_axi_img_in_AWSIZE,
        m_axi_img_in_AWBURST => Loop_1_proc_U0_m_axi_img_in_AWBURST,
        m_axi_img_in_AWLOCK => Loop_1_proc_U0_m_axi_img_in_AWLOCK,
        m_axi_img_in_AWCACHE => Loop_1_proc_U0_m_axi_img_in_AWCACHE,
        m_axi_img_in_AWPROT => Loop_1_proc_U0_m_axi_img_in_AWPROT,
        m_axi_img_in_AWQOS => Loop_1_proc_U0_m_axi_img_in_AWQOS,
        m_axi_img_in_AWREGION => Loop_1_proc_U0_m_axi_img_in_AWREGION,
        m_axi_img_in_AWUSER => Loop_1_proc_U0_m_axi_img_in_AWUSER,
        m_axi_img_in_WVALID => Loop_1_proc_U0_m_axi_img_in_WVALID,
        m_axi_img_in_WREADY => D_BUS_WREADY,
        m_axi_img_in_WDATA => Loop_1_proc_U0_m_axi_img_in_WDATA,
        m_axi_img_in_WSTRB => Loop_1_proc_U0_m_axi_img_in_WSTRB,
        m_axi_img_in_WLAST => Loop_1_proc_U0_m_axi_img_in_WLAST,
        m_axi_img_in_WID => Loop_1_proc_U0_m_axi_img_in_WID,
        m_axi_img_in_WUSER => Loop_1_proc_U0_m_axi_img_in_WUSER,
        m_axi_img_in_ARVALID => Loop_1_proc_U0_m_axi_img_in_ARVALID,
        m_axi_img_in_ARREADY => D_BUS_ARREADY,
        m_axi_img_in_ARADDR => Loop_1_proc_U0_m_axi_img_in_ARADDR,
        m_axi_img_in_ARID => Loop_1_proc_U0_m_axi_img_in_ARID,
        m_axi_img_in_ARLEN => Loop_1_proc_U0_m_axi_img_in_ARLEN,
        m_axi_img_in_ARSIZE => Loop_1_proc_U0_m_axi_img_in_ARSIZE,
        m_axi_img_in_ARBURST => Loop_1_proc_U0_m_axi_img_in_ARBURST,
        m_axi_img_in_ARLOCK => Loop_1_proc_U0_m_axi_img_in_ARLOCK,
        m_axi_img_in_ARCACHE => Loop_1_proc_U0_m_axi_img_in_ARCACHE,
        m_axi_img_in_ARPROT => Loop_1_proc_U0_m_axi_img_in_ARPROT,
        m_axi_img_in_ARQOS => Loop_1_proc_U0_m_axi_img_in_ARQOS,
        m_axi_img_in_ARREGION => Loop_1_proc_U0_m_axi_img_in_ARREGION,
        m_axi_img_in_ARUSER => Loop_1_proc_U0_m_axi_img_in_ARUSER,
        m_axi_img_in_RVALID => D_BUS_RVALID,
        m_axi_img_in_RREADY => Loop_1_proc_U0_m_axi_img_in_RREADY,
        m_axi_img_in_RDATA => D_BUS_RDATA,
        m_axi_img_in_RLAST => D_BUS_RLAST,
        m_axi_img_in_RID => D_BUS_RID,
        m_axi_img_in_RUSER => D_BUS_RUSER,
        m_axi_img_in_RRESP => D_BUS_RRESP,
        m_axi_img_in_BVALID => D_BUS_BVALID,
        m_axi_img_in_BREADY => Loop_1_proc_U0_m_axi_img_in_BREADY,
        m_axi_img_in_BRESP => D_BUS_BRESP,
        m_axi_img_in_BID => D_BUS_BID,
        m_axi_img_in_BUSER => D_BUS_BUSER,
        img_in_offset => img_in,
        img_out_offset => img_out);




    Loop_1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc_U0_ap_start <= ap_start;
    Loop_1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= Loop_1_proc_U0_ap_done;
    ap_idle <= Loop_1_proc_U0_ap_idle;
    ap_ready <= Loop_1_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_1_proc_U0_ap_done;
    ap_sync_ready <= Loop_1_proc_U0_ap_ready;
end behav;
