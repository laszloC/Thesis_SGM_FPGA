// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_img_in_AWVALID,
        m_axi_img_in_AWREADY,
        m_axi_img_in_AWADDR,
        m_axi_img_in_AWID,
        m_axi_img_in_AWLEN,
        m_axi_img_in_AWSIZE,
        m_axi_img_in_AWBURST,
        m_axi_img_in_AWLOCK,
        m_axi_img_in_AWCACHE,
        m_axi_img_in_AWPROT,
        m_axi_img_in_AWQOS,
        m_axi_img_in_AWREGION,
        m_axi_img_in_AWUSER,
        m_axi_img_in_WVALID,
        m_axi_img_in_WREADY,
        m_axi_img_in_WDATA,
        m_axi_img_in_WSTRB,
        m_axi_img_in_WLAST,
        m_axi_img_in_WID,
        m_axi_img_in_WUSER,
        m_axi_img_in_ARVALID,
        m_axi_img_in_ARREADY,
        m_axi_img_in_ARADDR,
        m_axi_img_in_ARID,
        m_axi_img_in_ARLEN,
        m_axi_img_in_ARSIZE,
        m_axi_img_in_ARBURST,
        m_axi_img_in_ARLOCK,
        m_axi_img_in_ARCACHE,
        m_axi_img_in_ARPROT,
        m_axi_img_in_ARQOS,
        m_axi_img_in_ARREGION,
        m_axi_img_in_ARUSER,
        m_axi_img_in_RVALID,
        m_axi_img_in_RREADY,
        m_axi_img_in_RDATA,
        m_axi_img_in_RLAST,
        m_axi_img_in_RID,
        m_axi_img_in_RUSER,
        m_axi_img_in_RRESP,
        m_axi_img_in_BVALID,
        m_axi_img_in_BREADY,
        m_axi_img_in_BRESP,
        m_axi_img_in_BID,
        m_axi_img_in_BUSER,
        img_in_offset,
        img_out_offset
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_img_in_AWVALID;
input   m_axi_img_in_AWREADY;
output  [31:0] m_axi_img_in_AWADDR;
output  [0:0] m_axi_img_in_AWID;
output  [31:0] m_axi_img_in_AWLEN;
output  [2:0] m_axi_img_in_AWSIZE;
output  [1:0] m_axi_img_in_AWBURST;
output  [1:0] m_axi_img_in_AWLOCK;
output  [3:0] m_axi_img_in_AWCACHE;
output  [2:0] m_axi_img_in_AWPROT;
output  [3:0] m_axi_img_in_AWQOS;
output  [3:0] m_axi_img_in_AWREGION;
output  [0:0] m_axi_img_in_AWUSER;
output   m_axi_img_in_WVALID;
input   m_axi_img_in_WREADY;
output  [7:0] m_axi_img_in_WDATA;
output  [0:0] m_axi_img_in_WSTRB;
output   m_axi_img_in_WLAST;
output  [0:0] m_axi_img_in_WID;
output  [0:0] m_axi_img_in_WUSER;
output   m_axi_img_in_ARVALID;
input   m_axi_img_in_ARREADY;
output  [31:0] m_axi_img_in_ARADDR;
output  [0:0] m_axi_img_in_ARID;
output  [31:0] m_axi_img_in_ARLEN;
output  [2:0] m_axi_img_in_ARSIZE;
output  [1:0] m_axi_img_in_ARBURST;
output  [1:0] m_axi_img_in_ARLOCK;
output  [3:0] m_axi_img_in_ARCACHE;
output  [2:0] m_axi_img_in_ARPROT;
output  [3:0] m_axi_img_in_ARQOS;
output  [3:0] m_axi_img_in_ARREGION;
output  [0:0] m_axi_img_in_ARUSER;
input   m_axi_img_in_RVALID;
output   m_axi_img_in_RREADY;
input  [7:0] m_axi_img_in_RDATA;
input   m_axi_img_in_RLAST;
input  [0:0] m_axi_img_in_RID;
input  [0:0] m_axi_img_in_RUSER;
input  [1:0] m_axi_img_in_RRESP;
input   m_axi_img_in_BVALID;
output   m_axi_img_in_BREADY;
input  [1:0] m_axi_img_in_BRESP;
input  [0:0] m_axi_img_in_BID;
input  [0:0] m_axi_img_in_BUSER;
input  [31:0] img_in_offset;
input  [31:0] img_out_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_img_in_AWVALID;
reg m_axi_img_in_WVALID;
reg m_axi_img_in_ARVALID;
reg m_axi_img_in_RREADY;
reg m_axi_img_in_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_in_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    img_in_blk_n_R;
wire    ap_CS_fsm_state10;
reg    img_in_blk_n_AW;
wire    ap_CS_fsm_state11;
reg    img_in_blk_n_W;
wire    ap_CS_fsm_state12;
reg    img_in_blk_n_B;
wire    ap_CS_fsm_state17;
wire  signed [32:0] sext_cast_fu_101_p1;
reg  signed [32:0] sext_cast_reg_160;
reg    ap_block_state1;
wire  signed [32:0] sext6_cast_fu_105_p1;
reg  signed [32:0] sext6_cast_reg_165;
wire   [15:0] i_fu_115_p2;
reg   [15:0] i_reg_173;
wire    ap_CS_fsm_state2;
reg   [31:0] img_in_addr_reg_178;
wire   [0:0] tmp_i_fu_109_p2;
reg   [31:0] img_in_addr_1_reg_184;
reg   [7:0] img_in_addr_read_reg_190;
wire   [7:0] tmp_2_i_fu_155_p2;
reg   [7:0] tmp_2_i_reg_195;
reg    ap_sig_ioackin_m_axi_img_in_AWREADY;
reg   [15:0] i_0_i_i_reg_90;
wire  signed [63:0] sum3_cast_fu_130_p1;
wire  signed [63:0] sum9_cast_fu_145_p1;
reg    ap_reg_ioackin_m_axi_img_in_ARREADY;
reg    ap_sig_ioackin_m_axi_img_in_ARREADY;
reg    ap_reg_ioackin_m_axi_img_in_AWREADY;
reg    ap_reg_ioackin_m_axi_img_in_WREADY;
reg    ap_sig_ioackin_m_axi_img_in_WREADY;
wire   [32:0] tmp_1_i_cast_fu_121_p1;
wire   [32:0] sum3_fu_125_p2;
wire   [32:0] sum9_fu_140_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 17'd1;
#0 ap_reg_ioackin_m_axi_img_in_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_img_in_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_img_in_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_109_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_img_in_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_m_axi_img_in_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_img_in_ARREADY <= 1'b0;
            end else if ((m_axi_img_in_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_img_in_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_img_in_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            if ((ap_sig_ioackin_m_axi_img_in_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_img_in_AWREADY <= 1'b0;
            end else if ((m_axi_img_in_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_img_in_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_img_in_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            if ((ap_sig_ioackin_m_axi_img_in_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_img_in_WREADY <= 1'b0;
            end else if ((m_axi_img_in_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_img_in_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_img_in_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_0_i_i_reg_90 <= i_reg_173;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_90 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_173 <= i_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_109_p2 == 1'd0))) begin
        img_in_addr_1_reg_184 <= sum9_cast_fu_145_p1;
        img_in_addr_reg_178 <= sum3_cast_fu_130_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_img_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        img_in_addr_read_reg_190 <= m_axi_img_in_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext6_cast_reg_165 <= sext6_cast_fu_105_p1;
        sext_cast_reg_160 <= sext_cast_fu_101_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (ap_sig_ioackin_m_axi_img_in_AWREADY == 1'b1))) begin
        tmp_2_i_reg_195 <= tmp_2_i_fu_155_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_109_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_109_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_img_in_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_img_in_ARREADY = m_axi_img_in_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_img_in_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_img_in_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_img_in_AWREADY = m_axi_img_in_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_img_in_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_img_in_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_img_in_WREADY = m_axi_img_in_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_img_in_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_in_blk_n_AR = m_axi_img_in_ARREADY;
    end else begin
        img_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        img_in_blk_n_AW = m_axi_img_in_AWREADY;
    end else begin
        img_in_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        img_in_blk_n_B = m_axi_img_in_BVALID;
    end else begin
        img_in_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_in_blk_n_R = m_axi_img_in_RVALID;
    end else begin
        img_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_in_blk_n_W = m_axi_img_in_WREADY;
    end else begin
        img_in_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_img_in_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_img_in_ARVALID = 1'b1;
    end else begin
        m_axi_img_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_img_in_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_img_in_AWVALID = 1'b1;
    end else begin
        m_axi_img_in_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_img_in_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_img_in_BREADY = 1'b1;
    end else begin
        m_axi_img_in_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_img_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_img_in_RREADY = 1'b1;
    end else begin
        m_axi_img_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_img_in_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_img_in_WVALID = 1'b1;
    end else begin
        m_axi_img_in_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_109_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_img_in_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_img_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (ap_sig_ioackin_m_axi_img_in_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (ap_sig_ioackin_m_axi_img_in_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((m_axi_img_in_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_fu_115_p2 = (i_0_i_i_reg_90 + 16'd1);

assign m_axi_img_in_ARADDR = img_in_addr_reg_178;

assign m_axi_img_in_ARBURST = 2'd0;

assign m_axi_img_in_ARCACHE = 4'd0;

assign m_axi_img_in_ARID = 1'd0;

assign m_axi_img_in_ARLEN = 32'd1;

assign m_axi_img_in_ARLOCK = 2'd0;

assign m_axi_img_in_ARPROT = 3'd0;

assign m_axi_img_in_ARQOS = 4'd0;

assign m_axi_img_in_ARREGION = 4'd0;

assign m_axi_img_in_ARSIZE = 3'd0;

assign m_axi_img_in_ARUSER = 1'd0;

assign m_axi_img_in_AWADDR = img_in_addr_1_reg_184;

assign m_axi_img_in_AWBURST = 2'd0;

assign m_axi_img_in_AWCACHE = 4'd0;

assign m_axi_img_in_AWID = 1'd0;

assign m_axi_img_in_AWLEN = 32'd1;

assign m_axi_img_in_AWLOCK = 2'd0;

assign m_axi_img_in_AWPROT = 3'd0;

assign m_axi_img_in_AWQOS = 4'd0;

assign m_axi_img_in_AWREGION = 4'd0;

assign m_axi_img_in_AWSIZE = 3'd0;

assign m_axi_img_in_AWUSER = 1'd0;

assign m_axi_img_in_WDATA = tmp_2_i_reg_195;

assign m_axi_img_in_WID = 1'd0;

assign m_axi_img_in_WLAST = 1'b0;

assign m_axi_img_in_WSTRB = 1'd1;

assign m_axi_img_in_WUSER = 1'd0;

assign sext6_cast_fu_105_p1 = $signed(img_out_offset);

assign sext_cast_fu_101_p1 = $signed(img_in_offset);

assign sum3_cast_fu_130_p1 = $signed(sum3_fu_125_p2);

assign sum3_fu_125_p2 = ($signed(sext_cast_reg_160) + $signed(tmp_1_i_cast_fu_121_p1));

assign sum9_cast_fu_145_p1 = $signed(sum9_fu_140_p2);

assign sum9_fu_140_p2 = ($signed(sext6_cast_reg_165) + $signed(tmp_1_i_cast_fu_121_p1));

assign tmp_1_i_cast_fu_121_p1 = i_0_i_i_reg_90;

assign tmp_2_i_fu_155_p2 = (img_in_addr_read_reg_190 ^ 8'd255);

assign tmp_i_fu_109_p2 = ((i_0_i_i_reg_90 == 16'd42300) ? 1'b1 : 1'b0);

endmodule //Loop_1_proc
