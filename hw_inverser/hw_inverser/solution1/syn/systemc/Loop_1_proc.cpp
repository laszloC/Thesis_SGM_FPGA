// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_1_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_1_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_1_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state1 = "1";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state2 = "10";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state3 = "100";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state5 = "10000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state6 = "100000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> Loop_1_proc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_1_proc::ap_const_lv32_9 = "1001";
const sc_lv<32> Loop_1_proc::ap_const_lv32_A = "1010";
const sc_lv<32> Loop_1_proc::ap_const_lv32_B = "1011";
const sc_lv<32> Loop_1_proc::ap_const_lv32_10 = "10000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_1_proc::ap_const_lv1_0 = "0";
const sc_lv<16> Loop_1_proc::ap_const_lv16_0 = "0000000000000000";
const sc_lv<3> Loop_1_proc::ap_const_lv3_0 = "000";
const sc_lv<2> Loop_1_proc::ap_const_lv2_0 = "00";
const sc_lv<4> Loop_1_proc::ap_const_lv4_0 = "0000";
const sc_lv<1> Loop_1_proc::ap_const_lv1_1 = "1";
const sc_lv<16> Loop_1_proc::ap_const_lv16_A53C = "1010010100111100";
const sc_lv<16> Loop_1_proc::ap_const_lv16_1 = "1";
const sc_lv<8> Loop_1_proc::ap_const_lv8_FF = "11111111";
const bool Loop_1_proc::ap_const_boolean_1 = true;

Loop_1_proc::Loop_1_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_109_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_109_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_img_in_ARREADY);
    sensitive << ( m_axi_img_in_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_img_in_AWREADY);
    sensitive << ( m_axi_img_in_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_img_in_WREADY);
    sensitive << ( m_axi_img_in_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_WREADY );

    SC_METHOD(thread_i_fu_115_p2);
    sensitive << ( i_0_i_i_reg_90 );

    SC_METHOD(thread_img_in_blk_n_AR);
    sensitive << ( m_axi_img_in_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_img_in_blk_n_AW);
    sensitive << ( m_axi_img_in_AWREADY );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_img_in_blk_n_B);
    sensitive << ( m_axi_img_in_BVALID );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_img_in_blk_n_R);
    sensitive << ( m_axi_img_in_RVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_img_in_blk_n_W);
    sensitive << ( m_axi_img_in_WREADY );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_m_axi_img_in_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( img_in_addr_reg_178 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_ARREADY );

    SC_METHOD(thread_m_axi_img_in_ARBURST);

    SC_METHOD(thread_m_axi_img_in_ARCACHE);

    SC_METHOD(thread_m_axi_img_in_ARID);

    SC_METHOD(thread_m_axi_img_in_ARLEN);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_ARREADY );

    SC_METHOD(thread_m_axi_img_in_ARLOCK);

    SC_METHOD(thread_m_axi_img_in_ARPROT);

    SC_METHOD(thread_m_axi_img_in_ARQOS);

    SC_METHOD(thread_m_axi_img_in_ARREGION);

    SC_METHOD(thread_m_axi_img_in_ARSIZE);

    SC_METHOD(thread_m_axi_img_in_ARUSER);

    SC_METHOD(thread_m_axi_img_in_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_ARREADY );

    SC_METHOD(thread_m_axi_img_in_AWADDR);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( img_in_addr_1_reg_184 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_AWREADY );

    SC_METHOD(thread_m_axi_img_in_AWBURST);

    SC_METHOD(thread_m_axi_img_in_AWCACHE);

    SC_METHOD(thread_m_axi_img_in_AWID);

    SC_METHOD(thread_m_axi_img_in_AWLEN);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_AWREADY );

    SC_METHOD(thread_m_axi_img_in_AWLOCK);

    SC_METHOD(thread_m_axi_img_in_AWPROT);

    SC_METHOD(thread_m_axi_img_in_AWQOS);

    SC_METHOD(thread_m_axi_img_in_AWREGION);

    SC_METHOD(thread_m_axi_img_in_AWSIZE);

    SC_METHOD(thread_m_axi_img_in_AWUSER);

    SC_METHOD(thread_m_axi_img_in_AWVALID);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_AWREADY );

    SC_METHOD(thread_m_axi_img_in_BREADY);
    sensitive << ( m_axi_img_in_BVALID );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_m_axi_img_in_RREADY);
    sensitive << ( m_axi_img_in_RVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_m_axi_img_in_WDATA);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_2_i_reg_195 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_WREADY );

    SC_METHOD(thread_m_axi_img_in_WID);

    SC_METHOD(thread_m_axi_img_in_WLAST);

    SC_METHOD(thread_m_axi_img_in_WSTRB);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_WREADY );

    SC_METHOD(thread_m_axi_img_in_WUSER);

    SC_METHOD(thread_m_axi_img_in_WVALID);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_reg_ioackin_m_axi_img_in_WREADY );

    SC_METHOD(thread_sext6_cast_fu_105_p1);
    sensitive << ( img_out_offset );

    SC_METHOD(thread_sext_cast_fu_101_p1);
    sensitive << ( img_in_offset );

    SC_METHOD(thread_sum3_cast_fu_130_p1);
    sensitive << ( sum3_fu_125_p2 );

    SC_METHOD(thread_sum3_fu_125_p2);
    sensitive << ( sext_cast_reg_160 );
    sensitive << ( tmp_1_i_cast_fu_121_p1 );

    SC_METHOD(thread_sum9_cast_fu_145_p1);
    sensitive << ( sum9_fu_140_p2 );

    SC_METHOD(thread_sum9_fu_140_p2);
    sensitive << ( sext6_cast_reg_165 );
    sensitive << ( tmp_1_i_cast_fu_121_p1 );

    SC_METHOD(thread_tmp_1_i_cast_fu_121_p1);
    sensitive << ( i_0_i_i_reg_90 );

    SC_METHOD(thread_tmp_2_i_fu_155_p2);
    sensitive << ( img_in_addr_read_reg_190 );

    SC_METHOD(thread_tmp_i_fu_109_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_i_reg_90 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_img_in_RVALID );
    sensitive << ( m_axi_img_in_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_109_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_img_in_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_img_in_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_img_in_WREADY );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000000000000001";
    ap_reg_ioackin_m_axi_img_in_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_img_in_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_img_in_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_1_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_img_in_AWVALID, "(port)m_axi_img_in_AWVALID");
    sc_trace(mVcdFile, m_axi_img_in_AWREADY, "(port)m_axi_img_in_AWREADY");
    sc_trace(mVcdFile, m_axi_img_in_AWADDR, "(port)m_axi_img_in_AWADDR");
    sc_trace(mVcdFile, m_axi_img_in_AWID, "(port)m_axi_img_in_AWID");
    sc_trace(mVcdFile, m_axi_img_in_AWLEN, "(port)m_axi_img_in_AWLEN");
    sc_trace(mVcdFile, m_axi_img_in_AWSIZE, "(port)m_axi_img_in_AWSIZE");
    sc_trace(mVcdFile, m_axi_img_in_AWBURST, "(port)m_axi_img_in_AWBURST");
    sc_trace(mVcdFile, m_axi_img_in_AWLOCK, "(port)m_axi_img_in_AWLOCK");
    sc_trace(mVcdFile, m_axi_img_in_AWCACHE, "(port)m_axi_img_in_AWCACHE");
    sc_trace(mVcdFile, m_axi_img_in_AWPROT, "(port)m_axi_img_in_AWPROT");
    sc_trace(mVcdFile, m_axi_img_in_AWQOS, "(port)m_axi_img_in_AWQOS");
    sc_trace(mVcdFile, m_axi_img_in_AWREGION, "(port)m_axi_img_in_AWREGION");
    sc_trace(mVcdFile, m_axi_img_in_AWUSER, "(port)m_axi_img_in_AWUSER");
    sc_trace(mVcdFile, m_axi_img_in_WVALID, "(port)m_axi_img_in_WVALID");
    sc_trace(mVcdFile, m_axi_img_in_WREADY, "(port)m_axi_img_in_WREADY");
    sc_trace(mVcdFile, m_axi_img_in_WDATA, "(port)m_axi_img_in_WDATA");
    sc_trace(mVcdFile, m_axi_img_in_WSTRB, "(port)m_axi_img_in_WSTRB");
    sc_trace(mVcdFile, m_axi_img_in_WLAST, "(port)m_axi_img_in_WLAST");
    sc_trace(mVcdFile, m_axi_img_in_WID, "(port)m_axi_img_in_WID");
    sc_trace(mVcdFile, m_axi_img_in_WUSER, "(port)m_axi_img_in_WUSER");
    sc_trace(mVcdFile, m_axi_img_in_ARVALID, "(port)m_axi_img_in_ARVALID");
    sc_trace(mVcdFile, m_axi_img_in_ARREADY, "(port)m_axi_img_in_ARREADY");
    sc_trace(mVcdFile, m_axi_img_in_ARADDR, "(port)m_axi_img_in_ARADDR");
    sc_trace(mVcdFile, m_axi_img_in_ARID, "(port)m_axi_img_in_ARID");
    sc_trace(mVcdFile, m_axi_img_in_ARLEN, "(port)m_axi_img_in_ARLEN");
    sc_trace(mVcdFile, m_axi_img_in_ARSIZE, "(port)m_axi_img_in_ARSIZE");
    sc_trace(mVcdFile, m_axi_img_in_ARBURST, "(port)m_axi_img_in_ARBURST");
    sc_trace(mVcdFile, m_axi_img_in_ARLOCK, "(port)m_axi_img_in_ARLOCK");
    sc_trace(mVcdFile, m_axi_img_in_ARCACHE, "(port)m_axi_img_in_ARCACHE");
    sc_trace(mVcdFile, m_axi_img_in_ARPROT, "(port)m_axi_img_in_ARPROT");
    sc_trace(mVcdFile, m_axi_img_in_ARQOS, "(port)m_axi_img_in_ARQOS");
    sc_trace(mVcdFile, m_axi_img_in_ARREGION, "(port)m_axi_img_in_ARREGION");
    sc_trace(mVcdFile, m_axi_img_in_ARUSER, "(port)m_axi_img_in_ARUSER");
    sc_trace(mVcdFile, m_axi_img_in_RVALID, "(port)m_axi_img_in_RVALID");
    sc_trace(mVcdFile, m_axi_img_in_RREADY, "(port)m_axi_img_in_RREADY");
    sc_trace(mVcdFile, m_axi_img_in_RDATA, "(port)m_axi_img_in_RDATA");
    sc_trace(mVcdFile, m_axi_img_in_RLAST, "(port)m_axi_img_in_RLAST");
    sc_trace(mVcdFile, m_axi_img_in_RID, "(port)m_axi_img_in_RID");
    sc_trace(mVcdFile, m_axi_img_in_RUSER, "(port)m_axi_img_in_RUSER");
    sc_trace(mVcdFile, m_axi_img_in_RRESP, "(port)m_axi_img_in_RRESP");
    sc_trace(mVcdFile, m_axi_img_in_BVALID, "(port)m_axi_img_in_BVALID");
    sc_trace(mVcdFile, m_axi_img_in_BREADY, "(port)m_axi_img_in_BREADY");
    sc_trace(mVcdFile, m_axi_img_in_BRESP, "(port)m_axi_img_in_BRESP");
    sc_trace(mVcdFile, m_axi_img_in_BID, "(port)m_axi_img_in_BID");
    sc_trace(mVcdFile, m_axi_img_in_BUSER, "(port)m_axi_img_in_BUSER");
    sc_trace(mVcdFile, img_in_offset, "(port)img_in_offset");
    sc_trace(mVcdFile, img_out_offset, "(port)img_out_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, img_in_blk_n_AR, "img_in_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, img_in_blk_n_R, "img_in_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, img_in_blk_n_AW, "img_in_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, img_in_blk_n_W, "img_in_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, img_in_blk_n_B, "img_in_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, sext_cast_fu_101_p1, "sext_cast_fu_101_p1");
    sc_trace(mVcdFile, sext_cast_reg_160, "sext_cast_reg_160");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, sext6_cast_fu_105_p1, "sext6_cast_fu_105_p1");
    sc_trace(mVcdFile, sext6_cast_reg_165, "sext6_cast_reg_165");
    sc_trace(mVcdFile, i_fu_115_p2, "i_fu_115_p2");
    sc_trace(mVcdFile, i_reg_173, "i_reg_173");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, img_in_addr_reg_178, "img_in_addr_reg_178");
    sc_trace(mVcdFile, tmp_i_fu_109_p2, "tmp_i_fu_109_p2");
    sc_trace(mVcdFile, img_in_addr_1_reg_184, "img_in_addr_1_reg_184");
    sc_trace(mVcdFile, img_in_addr_read_reg_190, "img_in_addr_read_reg_190");
    sc_trace(mVcdFile, tmp_2_i_fu_155_p2, "tmp_2_i_fu_155_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_195, "tmp_2_i_reg_195");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_img_in_AWREADY, "ap_sig_ioackin_m_axi_img_in_AWREADY");
    sc_trace(mVcdFile, i_0_i_i_reg_90, "i_0_i_i_reg_90");
    sc_trace(mVcdFile, sum3_cast_fu_130_p1, "sum3_cast_fu_130_p1");
    sc_trace(mVcdFile, sum9_cast_fu_145_p1, "sum9_cast_fu_145_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_img_in_ARREADY, "ap_reg_ioackin_m_axi_img_in_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_img_in_ARREADY, "ap_sig_ioackin_m_axi_img_in_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_img_in_AWREADY, "ap_reg_ioackin_m_axi_img_in_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_img_in_WREADY, "ap_reg_ioackin_m_axi_img_in_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_img_in_WREADY, "ap_sig_ioackin_m_axi_img_in_WREADY");
    sc_trace(mVcdFile, tmp_1_i_cast_fu_121_p1, "tmp_1_i_cast_fu_121_p1");
    sc_trace(mVcdFile, sum3_fu_125_p2, "sum3_fu_125_p2");
    sc_trace(mVcdFile, sum9_fu_140_p2, "sum9_fu_140_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_1_proc::~Loop_1_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_1_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_img_in_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_img_in_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_img_in_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_img_in_ARREADY.read())) {
                ap_reg_ioackin_m_axi_img_in_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_img_in_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_img_in_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_img_in_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_img_in_AWREADY.read())) {
                ap_reg_ioackin_m_axi_img_in_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_img_in_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_img_in_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_img_in_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_img_in_WREADY.read())) {
                ap_reg_ioackin_m_axi_img_in_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(m_axi_img_in_BVALID.read(), ap_const_logic_1))) {
        i_0_i_i_reg_90 = i_reg_173.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_i_reg_90 = ap_const_lv16_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_173 = i_fu_115_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_0))) {
        img_in_addr_1_reg_184 =  (sc_lv<32>) (sum9_cast_fu_145_p1.read());
        img_in_addr_reg_178 =  (sc_lv<32>) (sum3_cast_fu_130_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_img_in_RVALID.read(), ap_const_logic_1))) {
        img_in_addr_read_reg_190 = m_axi_img_in_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        sext6_cast_reg_165 = sext6_cast_fu_105_p1.read();
        sext_cast_reg_160 = sext_cast_fu_101_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_img_in_AWREADY.read(), ap_const_logic_1))) {
        tmp_2_i_reg_195 = tmp_2_i_fu_155_p2.read();
    }
}

void Loop_1_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_1_proc::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Loop_1_proc::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Loop_1_proc::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Loop_1_proc::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Loop_1_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_1_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_1_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_1_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_1_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_ap_sig_ioackin_m_axi_img_in_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_img_in_ARREADY.read())) {
        ap_sig_ioackin_m_axi_img_in_ARREADY = m_axi_img_in_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_img_in_ARREADY = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_ap_sig_ioackin_m_axi_img_in_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_img_in_AWREADY.read())) {
        ap_sig_ioackin_m_axi_img_in_AWREADY = m_axi_img_in_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_img_in_AWREADY = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_ap_sig_ioackin_m_axi_img_in_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_img_in_WREADY.read())) {
        ap_sig_ioackin_m_axi_img_in_WREADY = m_axi_img_in_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_img_in_WREADY = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_i_fu_115_p2() {
    i_fu_115_p2 = (!i_0_i_i_reg_90.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i_0_i_i_reg_90.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void Loop_1_proc::thread_img_in_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        img_in_blk_n_AR = m_axi_img_in_ARREADY.read();
    } else {
        img_in_blk_n_AR = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_img_in_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        img_in_blk_n_AW = m_axi_img_in_AWREADY.read();
    } else {
        img_in_blk_n_AW = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_img_in_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        img_in_blk_n_B = m_axi_img_in_BVALID.read();
    } else {
        img_in_blk_n_B = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_img_in_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        img_in_blk_n_R = m_axi_img_in_RVALID.read();
    } else {
        img_in_blk_n_R = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_img_in_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        img_in_blk_n_W = m_axi_img_in_WREADY.read();
    } else {
        img_in_blk_n_W = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_m_axi_img_in_ARADDR() {
    m_axi_img_in_ARADDR = img_in_addr_reg_178.read();
}

void Loop_1_proc::thread_m_axi_img_in_ARBURST() {
    m_axi_img_in_ARBURST = ap_const_lv2_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARCACHE() {
    m_axi_img_in_ARCACHE = ap_const_lv4_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARID() {
    m_axi_img_in_ARID = ap_const_lv1_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARLEN() {
    m_axi_img_in_ARLEN = ap_const_lv32_1;
}

void Loop_1_proc::thread_m_axi_img_in_ARLOCK() {
    m_axi_img_in_ARLOCK = ap_const_lv2_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARPROT() {
    m_axi_img_in_ARPROT = ap_const_lv3_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARQOS() {
    m_axi_img_in_ARQOS = ap_const_lv4_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARREGION() {
    m_axi_img_in_ARREGION = ap_const_lv4_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARSIZE() {
    m_axi_img_in_ARSIZE = ap_const_lv3_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARUSER() {
    m_axi_img_in_ARUSER = ap_const_lv1_0;
}

void Loop_1_proc::thread_m_axi_img_in_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_img_in_ARREADY.read()))) {
        m_axi_img_in_ARVALID = ap_const_logic_1;
    } else {
        m_axi_img_in_ARVALID = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_m_axi_img_in_AWADDR() {
    m_axi_img_in_AWADDR = img_in_addr_1_reg_184.read();
}

void Loop_1_proc::thread_m_axi_img_in_AWBURST() {
    m_axi_img_in_AWBURST = ap_const_lv2_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWCACHE() {
    m_axi_img_in_AWCACHE = ap_const_lv4_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWID() {
    m_axi_img_in_AWID = ap_const_lv1_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWLEN() {
    m_axi_img_in_AWLEN = ap_const_lv32_1;
}

void Loop_1_proc::thread_m_axi_img_in_AWLOCK() {
    m_axi_img_in_AWLOCK = ap_const_lv2_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWPROT() {
    m_axi_img_in_AWPROT = ap_const_lv3_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWQOS() {
    m_axi_img_in_AWQOS = ap_const_lv4_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWREGION() {
    m_axi_img_in_AWREGION = ap_const_lv4_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWSIZE() {
    m_axi_img_in_AWSIZE = ap_const_lv3_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWUSER() {
    m_axi_img_in_AWUSER = ap_const_lv1_0;
}

void Loop_1_proc::thread_m_axi_img_in_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_img_in_AWREADY.read()))) {
        m_axi_img_in_AWVALID = ap_const_logic_1;
    } else {
        m_axi_img_in_AWVALID = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_m_axi_img_in_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(m_axi_img_in_BVALID.read(), ap_const_logic_1))) {
        m_axi_img_in_BREADY = ap_const_logic_1;
    } else {
        m_axi_img_in_BREADY = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_m_axi_img_in_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(m_axi_img_in_RVALID.read(), ap_const_logic_1))) {
        m_axi_img_in_RREADY = ap_const_logic_1;
    } else {
        m_axi_img_in_RREADY = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_m_axi_img_in_WDATA() {
    m_axi_img_in_WDATA = tmp_2_i_reg_195.read();
}

void Loop_1_proc::thread_m_axi_img_in_WID() {
    m_axi_img_in_WID = ap_const_lv1_0;
}

void Loop_1_proc::thread_m_axi_img_in_WLAST() {
    m_axi_img_in_WLAST = ap_const_logic_0;
}

void Loop_1_proc::thread_m_axi_img_in_WSTRB() {
    m_axi_img_in_WSTRB = ap_const_lv1_1;
}

void Loop_1_proc::thread_m_axi_img_in_WUSER() {
    m_axi_img_in_WUSER = ap_const_lv1_0;
}

void Loop_1_proc::thread_m_axi_img_in_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_img_in_WREADY.read()))) {
        m_axi_img_in_WVALID = ap_const_logic_1;
    } else {
        m_axi_img_in_WVALID = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_sext6_cast_fu_105_p1() {
    sext6_cast_fu_105_p1 = esl_sext<33,32>(img_out_offset.read());
}

void Loop_1_proc::thread_sext_cast_fu_101_p1() {
    sext_cast_fu_101_p1 = esl_sext<33,32>(img_in_offset.read());
}

void Loop_1_proc::thread_sum3_cast_fu_130_p1() {
    sum3_cast_fu_130_p1 = esl_sext<64,33>(sum3_fu_125_p2.read());
}

void Loop_1_proc::thread_sum3_fu_125_p2() {
    sum3_fu_125_p2 = (!sext_cast_reg_160.read().is_01() || !tmp_1_i_cast_fu_121_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(sext_cast_reg_160.read()) + sc_biguint<33>(tmp_1_i_cast_fu_121_p1.read()));
}

void Loop_1_proc::thread_sum9_cast_fu_145_p1() {
    sum9_cast_fu_145_p1 = esl_sext<64,33>(sum9_fu_140_p2.read());
}

void Loop_1_proc::thread_sum9_fu_140_p2() {
    sum9_fu_140_p2 = (!sext6_cast_reg_165.read().is_01() || !tmp_1_i_cast_fu_121_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(sext6_cast_reg_165.read()) + sc_biguint<33>(tmp_1_i_cast_fu_121_p1.read()));
}

void Loop_1_proc::thread_tmp_1_i_cast_fu_121_p1() {
    tmp_1_i_cast_fu_121_p1 = esl_zext<33,16>(i_0_i_i_reg_90.read());
}

void Loop_1_proc::thread_tmp_2_i_fu_155_p2() {
    tmp_2_i_fu_155_p2 = (img_in_addr_read_reg_190.read() ^ ap_const_lv8_FF);
}

void Loop_1_proc::thread_tmp_i_fu_109_p2() {
    tmp_i_fu_109_p2 = (!i_0_i_i_reg_90.read().is_01() || !ap_const_lv16_A53C.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_90.read() == ap_const_lv16_A53C);
}

void Loop_1_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_img_in_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_img_in_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_img_in_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_img_in_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(m_axi_img_in_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXX";
            break;
    }
}

}

