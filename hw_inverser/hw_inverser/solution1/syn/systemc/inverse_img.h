// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _inverse_img_HH_
#define _inverse_img_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_1_proc.h"
#include "inverse_img_D_BUS_s_axi.h"
#include "inverse_img_D_BUS_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_D_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_D_BUS_DATA_WIDTH = 32,
         unsigned int C_M_AXI_D_BUS_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_D_BUS_ID_WIDTH = 1,
         unsigned int C_M_AXI_D_BUS_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_D_BUS_DATA_WIDTH = 32,
         unsigned int C_M_AXI_D_BUS_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_D_BUS_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_D_BUS_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_D_BUS_BUSER_WIDTH = 1>
struct inverse_img : public sc_module {
    // Port declarations 65
    sc_in< sc_logic > s_axi_D_BUS_AWVALID;
    sc_out< sc_logic > s_axi_D_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_D_BUS_ADDR_WIDTH> > s_axi_D_BUS_AWADDR;
    sc_in< sc_logic > s_axi_D_BUS_WVALID;
    sc_out< sc_logic > s_axi_D_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_D_BUS_DATA_WIDTH> > s_axi_D_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_D_BUS_DATA_WIDTH/8> > s_axi_D_BUS_WSTRB;
    sc_in< sc_logic > s_axi_D_BUS_ARVALID;
    sc_out< sc_logic > s_axi_D_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_D_BUS_ADDR_WIDTH> > s_axi_D_BUS_ARADDR;
    sc_out< sc_logic > s_axi_D_BUS_RVALID;
    sc_in< sc_logic > s_axi_D_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_D_BUS_DATA_WIDTH> > s_axi_D_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_D_BUS_RRESP;
    sc_out< sc_logic > s_axi_D_BUS_BVALID;
    sc_in< sc_logic > s_axi_D_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_D_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_out< sc_logic > m_axi_D_BUS_AWVALID;
    sc_in< sc_logic > m_axi_D_BUS_AWREADY;
    sc_out< sc_uint<C_M_AXI_D_BUS_ADDR_WIDTH> > m_axi_D_BUS_AWADDR;
    sc_out< sc_uint<C_M_AXI_D_BUS_ID_WIDTH> > m_axi_D_BUS_AWID;
    sc_out< sc_lv<8> > m_axi_D_BUS_AWLEN;
    sc_out< sc_lv<3> > m_axi_D_BUS_AWSIZE;
    sc_out< sc_lv<2> > m_axi_D_BUS_AWBURST;
    sc_out< sc_lv<2> > m_axi_D_BUS_AWLOCK;
    sc_out< sc_lv<4> > m_axi_D_BUS_AWCACHE;
    sc_out< sc_lv<3> > m_axi_D_BUS_AWPROT;
    sc_out< sc_lv<4> > m_axi_D_BUS_AWQOS;
    sc_out< sc_lv<4> > m_axi_D_BUS_AWREGION;
    sc_out< sc_uint<C_M_AXI_D_BUS_AWUSER_WIDTH> > m_axi_D_BUS_AWUSER;
    sc_out< sc_logic > m_axi_D_BUS_WVALID;
    sc_in< sc_logic > m_axi_D_BUS_WREADY;
    sc_out< sc_uint<C_M_AXI_D_BUS_DATA_WIDTH> > m_axi_D_BUS_WDATA;
    sc_out< sc_uint<C_M_AXI_D_BUS_DATA_WIDTH/8> > m_axi_D_BUS_WSTRB;
    sc_out< sc_logic > m_axi_D_BUS_WLAST;
    sc_out< sc_uint<C_M_AXI_D_BUS_ID_WIDTH> > m_axi_D_BUS_WID;
    sc_out< sc_uint<C_M_AXI_D_BUS_WUSER_WIDTH> > m_axi_D_BUS_WUSER;
    sc_out< sc_logic > m_axi_D_BUS_ARVALID;
    sc_in< sc_logic > m_axi_D_BUS_ARREADY;
    sc_out< sc_uint<C_M_AXI_D_BUS_ADDR_WIDTH> > m_axi_D_BUS_ARADDR;
    sc_out< sc_uint<C_M_AXI_D_BUS_ID_WIDTH> > m_axi_D_BUS_ARID;
    sc_out< sc_lv<8> > m_axi_D_BUS_ARLEN;
    sc_out< sc_lv<3> > m_axi_D_BUS_ARSIZE;
    sc_out< sc_lv<2> > m_axi_D_BUS_ARBURST;
    sc_out< sc_lv<2> > m_axi_D_BUS_ARLOCK;
    sc_out< sc_lv<4> > m_axi_D_BUS_ARCACHE;
    sc_out< sc_lv<3> > m_axi_D_BUS_ARPROT;
    sc_out< sc_lv<4> > m_axi_D_BUS_ARQOS;
    sc_out< sc_lv<4> > m_axi_D_BUS_ARREGION;
    sc_out< sc_uint<C_M_AXI_D_BUS_ARUSER_WIDTH> > m_axi_D_BUS_ARUSER;
    sc_in< sc_logic > m_axi_D_BUS_RVALID;
    sc_out< sc_logic > m_axi_D_BUS_RREADY;
    sc_in< sc_uint<C_M_AXI_D_BUS_DATA_WIDTH> > m_axi_D_BUS_RDATA;
    sc_in< sc_logic > m_axi_D_BUS_RLAST;
    sc_in< sc_uint<C_M_AXI_D_BUS_ID_WIDTH> > m_axi_D_BUS_RID;
    sc_in< sc_uint<C_M_AXI_D_BUS_RUSER_WIDTH> > m_axi_D_BUS_RUSER;
    sc_in< sc_lv<2> > m_axi_D_BUS_RRESP;
    sc_in< sc_logic > m_axi_D_BUS_BVALID;
    sc_out< sc_logic > m_axi_D_BUS_BREADY;
    sc_in< sc_lv<2> > m_axi_D_BUS_BRESP;
    sc_in< sc_uint<C_M_AXI_D_BUS_ID_WIDTH> > m_axi_D_BUS_BID;
    sc_in< sc_uint<C_M_AXI_D_BUS_BUSER_WIDTH> > m_axi_D_BUS_BUSER;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    inverse_img(sc_module_name name);
    SC_HAS_PROCESS(inverse_img);

    ~inverse_img();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    inverse_img_D_BUS_s_axi<C_S_AXI_D_BUS_ADDR_WIDTH,C_S_AXI_D_BUS_DATA_WIDTH>* inverse_img_D_BUS_s_axi_U;
    inverse_img_D_BUS_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_D_BUS_ID_WIDTH,C_M_AXI_D_BUS_ADDR_WIDTH,C_M_AXI_D_BUS_DATA_WIDTH,C_M_AXI_D_BUS_AWUSER_WIDTH,C_M_AXI_D_BUS_ARUSER_WIDTH,C_M_AXI_D_BUS_WUSER_WIDTH,C_M_AXI_D_BUS_RUSER_WIDTH,C_M_AXI_D_BUS_BUSER_WIDTH,C_M_AXI_D_BUS_USER_VALUE,C_M_AXI_D_BUS_PROT_VALUE,C_M_AXI_D_BUS_CACHE_VALUE>* inverse_img_D_BUS_m_axi_U;
    Loop_1_proc* Loop_1_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > img_in;
    sc_signal< sc_lv<32> > img_out;
    sc_signal< sc_logic > D_BUS_AWREADY;
    sc_signal< sc_logic > D_BUS_WREADY;
    sc_signal< sc_logic > D_BUS_ARREADY;
    sc_signal< sc_logic > D_BUS_RVALID;
    sc_signal< sc_lv<8> > D_BUS_RDATA;
    sc_signal< sc_logic > D_BUS_RLAST;
    sc_signal< sc_lv<1> > D_BUS_RID;
    sc_signal< sc_lv<1> > D_BUS_RUSER;
    sc_signal< sc_lv<2> > D_BUS_RRESP;
    sc_signal< sc_logic > D_BUS_BVALID;
    sc_signal< sc_lv<2> > D_BUS_BRESP;
    sc_signal< sc_lv<1> > D_BUS_BID;
    sc_signal< sc_lv<1> > D_BUS_BUSER;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_ready;
    sc_signal< sc_logic > Loop_1_proc_U0_m_axi_img_in_AWVALID;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_m_axi_img_in_AWADDR;
    sc_signal< sc_lv<1> > Loop_1_proc_U0_m_axi_img_in_AWID;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_m_axi_img_in_AWLEN;
    sc_signal< sc_lv<3> > Loop_1_proc_U0_m_axi_img_in_AWSIZE;
    sc_signal< sc_lv<2> > Loop_1_proc_U0_m_axi_img_in_AWBURST;
    sc_signal< sc_lv<2> > Loop_1_proc_U0_m_axi_img_in_AWLOCK;
    sc_signal< sc_lv<4> > Loop_1_proc_U0_m_axi_img_in_AWCACHE;
    sc_signal< sc_lv<3> > Loop_1_proc_U0_m_axi_img_in_AWPROT;
    sc_signal< sc_lv<4> > Loop_1_proc_U0_m_axi_img_in_AWQOS;
    sc_signal< sc_lv<4> > Loop_1_proc_U0_m_axi_img_in_AWREGION;
    sc_signal< sc_lv<1> > Loop_1_proc_U0_m_axi_img_in_AWUSER;
    sc_signal< sc_logic > Loop_1_proc_U0_m_axi_img_in_WVALID;
    sc_signal< sc_lv<8> > Loop_1_proc_U0_m_axi_img_in_WDATA;
    sc_signal< sc_lv<1> > Loop_1_proc_U0_m_axi_img_in_WSTRB;
    sc_signal< sc_logic > Loop_1_proc_U0_m_axi_img_in_WLAST;
    sc_signal< sc_lv<1> > Loop_1_proc_U0_m_axi_img_in_WID;
    sc_signal< sc_lv<1> > Loop_1_proc_U0_m_axi_img_in_WUSER;
    sc_signal< sc_logic > Loop_1_proc_U0_m_axi_img_in_ARVALID;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_m_axi_img_in_ARADDR;
    sc_signal< sc_lv<1> > Loop_1_proc_U0_m_axi_img_in_ARID;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_m_axi_img_in_ARLEN;
    sc_signal< sc_lv<3> > Loop_1_proc_U0_m_axi_img_in_ARSIZE;
    sc_signal< sc_lv<2> > Loop_1_proc_U0_m_axi_img_in_ARBURST;
    sc_signal< sc_lv<2> > Loop_1_proc_U0_m_axi_img_in_ARLOCK;
    sc_signal< sc_lv<4> > Loop_1_proc_U0_m_axi_img_in_ARCACHE;
    sc_signal< sc_lv<3> > Loop_1_proc_U0_m_axi_img_in_ARPROT;
    sc_signal< sc_lv<4> > Loop_1_proc_U0_m_axi_img_in_ARQOS;
    sc_signal< sc_lv<4> > Loop_1_proc_U0_m_axi_img_in_ARREGION;
    sc_signal< sc_lv<1> > Loop_1_proc_U0_m_axi_img_in_ARUSER;
    sc_signal< sc_logic > Loop_1_proc_U0_m_axi_img_in_RREADY;
    sc_signal< sc_logic > Loop_1_proc_U0_m_axi_img_in_BREADY;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Loop_1_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_1_proc_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_D_BUS_USER_VALUE;
    static const int C_M_AXI_D_BUS_PROT_VALUE;
    static const int C_M_AXI_D_BUS_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Loop_1_proc_U0_ap_continue();
    void thread_Loop_1_proc_U0_ap_start();
    void thread_Loop_1_proc_U0_start_full_n();
    void thread_Loop_1_proc_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
