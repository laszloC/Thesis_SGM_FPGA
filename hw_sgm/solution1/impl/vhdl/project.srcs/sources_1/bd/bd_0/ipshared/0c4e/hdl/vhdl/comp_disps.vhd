-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity comp_disps is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_cost_in_m_img_AWVALID : OUT STD_LOGIC;
    m_axi_cost_in_m_img_AWREADY : IN STD_LOGIC;
    m_axi_cost_in_m_img_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cost_in_m_img_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cost_in_m_img_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cost_in_m_img_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cost_in_m_img_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cost_in_m_img_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cost_in_m_img_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cost_in_m_img_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cost_in_m_img_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cost_in_m_img_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_WVALID : OUT STD_LOGIC;
    m_axi_cost_in_m_img_WREADY : IN STD_LOGIC;
    m_axi_cost_in_m_img_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cost_in_m_img_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cost_in_m_img_WLAST : OUT STD_LOGIC;
    m_axi_cost_in_m_img_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_ARVALID : OUT STD_LOGIC;
    m_axi_cost_in_m_img_ARREADY : IN STD_LOGIC;
    m_axi_cost_in_m_img_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cost_in_m_img_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cost_in_m_img_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cost_in_m_img_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cost_in_m_img_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cost_in_m_img_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cost_in_m_img_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cost_in_m_img_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cost_in_m_img_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cost_in_m_img_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_RVALID : IN STD_LOGIC;
    m_axi_cost_in_m_img_RREADY : OUT STD_LOGIC;
    m_axi_cost_in_m_img_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cost_in_m_img_RLAST : IN STD_LOGIC;
    m_axi_cost_in_m_img_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cost_in_m_img_BVALID : IN STD_LOGIC;
    m_axi_cost_in_m_img_BREADY : OUT STD_LOGIC;
    m_axi_cost_in_m_img_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cost_in_m_img_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cost_in_m_img_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_AWVALID : OUT STD_LOGIC;
    m_axi_disp_out_m_img_AWREADY : IN STD_LOGIC;
    m_axi_disp_out_m_img_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_disp_out_m_img_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_disp_out_m_img_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_disp_out_m_img_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_disp_out_m_img_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_disp_out_m_img_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_disp_out_m_img_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_disp_out_m_img_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_disp_out_m_img_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_disp_out_m_img_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_WVALID : OUT STD_LOGIC;
    m_axi_disp_out_m_img_WREADY : IN STD_LOGIC;
    m_axi_disp_out_m_img_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_disp_out_m_img_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_WLAST : OUT STD_LOGIC;
    m_axi_disp_out_m_img_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_ARVALID : OUT STD_LOGIC;
    m_axi_disp_out_m_img_ARREADY : IN STD_LOGIC;
    m_axi_disp_out_m_img_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_disp_out_m_img_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_disp_out_m_img_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_disp_out_m_img_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_disp_out_m_img_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_disp_out_m_img_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_disp_out_m_img_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_disp_out_m_img_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_disp_out_m_img_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_disp_out_m_img_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_RVALID : IN STD_LOGIC;
    m_axi_disp_out_m_img_RREADY : OUT STD_LOGIC;
    m_axi_disp_out_m_img_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_disp_out_m_img_RLAST : IN STD_LOGIC;
    m_axi_disp_out_m_img_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_disp_out_m_img_BVALID : IN STD_LOGIC;
    m_axi_disp_out_m_img_BREADY : OUT STD_LOGIC;
    m_axi_disp_out_m_img_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_disp_out_m_img_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_disp_out_m_img_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of comp_disps is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_E1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100001";
    constant ap_const_lv8_BC : STD_LOGIC_VECTOR (7 downto 0) := "10111100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cost_in_m_img_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cost_in_m_img_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal disp_out_m_img_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal disp_out_m_img_blk_n_W : STD_LOGIC;
    signal disp_out_m_img_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal next_mul_fu_173_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_308 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_ioackin_m_axi_disp_out_m_img_AWREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal i_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_9_fu_248_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_9_reg_335 : STD_LOGIC_VECTOR (21 downto 0);
    signal exitcond2_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_cost_in_m_img_ARREADY : STD_LOGIC;
    signal min_d_cast1_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_d_cast1_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_disp_out_m_img_WREADY : STD_LOGIC;
    signal ap_block_state11_io : BOOLEAN;
    signal d_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_reg_354 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_c_1_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_assign_min_d1_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal min_c_2_min_c_fu_301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_assign_1_reg_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_115 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_assign_2_reg_127 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_d1_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal min_c_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_d_reg_162 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_disp_out_m_img_WREADY : STD_LOGIC := '0';
    signal j_assign_2_cast5_fu_202_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_fu_218_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_224_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl1_fu_236_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl_cast_fu_232_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl1_cast_fu_244_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_432 : BOOLEAN;
    signal ap_condition_220 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_m_axi_cost_in_m_img_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_cost_in_m_img_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY <= ap_const_logic_0;
            else
                if (((exitcond3_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    if ((ap_const_boolean_0 = ap_block_state2_io)) then 
                        ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_disp_out_m_img_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_disp_out_m_img_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_disp_out_m_img_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_272_p2 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_1 = ap_condition_220)) then 
                        ap_reg_ioackin_m_axi_disp_out_m_img_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_condition_432)) then 
                        ap_reg_ioackin_m_axi_disp_out_m_img_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_assign_1_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_disp_out_m_img_BVALID = ap_const_logic_1))) then 
                i_assign_1_reg_104 <= i_reg_316;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_assign_1_reg_104 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_assign_2_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
                j_assign_2_reg_127 <= ap_const_lv8_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_272_p2 = ap_const_lv1_1))) then 
                j_assign_2_reg_127 <= j_reg_330;
            end if; 
        end if;
    end process;

    min_c_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                min_c_reg_150 <= min_c_2_min_c_fu_301_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                min_c_reg_150 <= ap_const_lv32_FF;
            end if; 
        end if;
    end process;

    min_d1_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                min_d1_reg_138 <= j_assign_min_d1_fu_294_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                min_d1_reg_138 <= ap_const_lv32_1F;
            end if; 
        end if;
    end process;

    min_d_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                min_d_reg_162 <= d_reg_354;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                min_d_reg_162 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_disp_out_m_img_BVALID = ap_const_logic_1))) then 
                phi_mul_reg_115 <= next_mul_reg_308;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_115 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                d_reg_354 <= d_fu_278_p2;
                    min_d_cast1_reg_346(4 downto 0) <= min_d_cast1_fu_268_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                i_reg_316 <= i_fu_185_p2;
                next_mul_reg_308 <= next_mul_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_330 <= j_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0)))) and (exitcond_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                min_c_1_reg_359 <= m_axi_cost_in_m_img_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_9_reg_335(21 downto 1) <= tmp_9_fu_248_p2(21 downto 1);
            end if;
        end if;
    end process;
    tmp_9_reg_335(0) <= '0';
    min_d_cast1_reg_346(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_cost_in_m_img_RVALID, m_axi_disp_out_m_img_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state11, exitcond_fu_272_p2, ap_CS_fsm_state2, exitcond3_fu_179_p2, ap_CS_fsm_state16, ap_block_state2_io, ap_CS_fsm_state3, exitcond2_fu_206_p2, ap_sig_ioackin_m_axi_cost_in_m_img_ARREADY, ap_block_state11_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (exitcond3_fu_179_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((exitcond3_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_206_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_m_axi_cost_in_m_img_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not(((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_272_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0)))) and (exitcond_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_disp_out_m_img_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state11_assign_proc : process(m_axi_cost_in_m_img_RVALID, exitcond_fu_272_p2)
    begin
                ap_block_state11 <= ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_io_assign_proc : process(exitcond_fu_272_p2, ap_sig_ioackin_m_axi_disp_out_m_img_WREADY)
    begin
                ap_block_state11_io <= ((ap_sig_ioackin_m_axi_disp_out_m_img_WREADY = ap_const_logic_0) and (exitcond_fu_272_p2 = ap_const_lv1_1));
    end process;


    ap_block_state2_io_assign_proc : process(exitcond3_fu_179_p2, ap_sig_ioackin_m_axi_disp_out_m_img_AWREADY)
    begin
                ap_block_state2_io <= ((exitcond3_fu_179_p2 = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_disp_out_m_img_AWREADY = ap_const_logic_0));
    end process;


    ap_condition_220_assign_proc : process(m_axi_cost_in_m_img_RVALID, exitcond_fu_272_p2, ap_block_state11_io)
    begin
                ap_condition_220 <= not(((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0))));
    end process;


    ap_condition_432_assign_proc : process(m_axi_cost_in_m_img_RVALID, m_axi_disp_out_m_img_WREADY, exitcond_fu_272_p2)
    begin
                ap_condition_432 <= (not(((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0))) and (m_axi_disp_out_m_img_WREADY = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_179_p2, ap_block_state2_io)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (exitcond3_fu_179_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_179_p2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (exitcond3_fu_179_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_cost_in_m_img_ARREADY_assign_proc : process(m_axi_cost_in_m_img_ARREADY, ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_cost_in_m_img_ARREADY <= m_axi_cost_in_m_img_ARREADY;
        else 
            ap_sig_ioackin_m_axi_cost_in_m_img_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_disp_out_m_img_AWREADY_assign_proc : process(m_axi_disp_out_m_img_AWREADY, ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_disp_out_m_img_AWREADY <= m_axi_disp_out_m_img_AWREADY;
        else 
            ap_sig_ioackin_m_axi_disp_out_m_img_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_disp_out_m_img_WREADY_assign_proc : process(m_axi_disp_out_m_img_WREADY, ap_reg_ioackin_m_axi_disp_out_m_img_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_disp_out_m_img_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_disp_out_m_img_WREADY <= m_axi_disp_out_m_img_WREADY;
        else 
            ap_sig_ioackin_m_axi_disp_out_m_img_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    cost_in_m_img_blk_n_AR_assign_proc : process(m_axi_cost_in_m_img_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cost_in_m_img_blk_n_AR <= m_axi_cost_in_m_img_ARREADY;
        else 
            cost_in_m_img_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    cost_in_m_img_blk_n_R_assign_proc : process(m_axi_cost_in_m_img_RVALID, ap_CS_fsm_state11, exitcond_fu_272_p2)
    begin
        if (((exitcond_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            cost_in_m_img_blk_n_R <= m_axi_cost_in_m_img_RVALID;
        else 
            cost_in_m_img_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    d_fu_278_p2 <= std_logic_vector(unsigned(min_d_reg_162) + unsigned(ap_const_lv5_1));

    disp_out_m_img_blk_n_AW_assign_proc : process(m_axi_disp_out_m_img_AWREADY, ap_CS_fsm_state2, exitcond3_fu_179_p2)
    begin
        if (((exitcond3_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            disp_out_m_img_blk_n_AW <= m_axi_disp_out_m_img_AWREADY;
        else 
            disp_out_m_img_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    disp_out_m_img_blk_n_B_assign_proc : process(m_axi_disp_out_m_img_BVALID, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            disp_out_m_img_blk_n_B <= m_axi_disp_out_m_img_BVALID;
        else 
            disp_out_m_img_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    disp_out_m_img_blk_n_W_assign_proc : process(m_axi_disp_out_m_img_WREADY, ap_CS_fsm_state11, exitcond_fu_272_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_272_p2 = ap_const_lv1_1))) then 
            disp_out_m_img_blk_n_W <= m_axi_disp_out_m_img_WREADY;
        else 
            disp_out_m_img_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    exitcond2_fu_206_p2 <= "1" when (j_assign_2_reg_127 = ap_const_lv8_E1) else "0";
    exitcond3_fu_179_p2 <= "1" when (i_assign_1_reg_104 = ap_const_lv8_BC) else "0";
    exitcond_fu_272_p2 <= "1" when (min_d_reg_162 = ap_const_lv5_1E) else "0";
    i_fu_185_p2 <= std_logic_vector(unsigned(i_assign_1_reg_104) + unsigned(ap_const_lv8_1));
    j_assign_2_cast5_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_assign_2_reg_127),16));
    j_assign_min_d1_fu_294_p3 <= 
        min_d_cast1_reg_346 when (tmp_5_fu_289_p2(0) = '1') else 
        min_d1_reg_138;
    j_fu_212_p2 <= std_logic_vector(unsigned(j_assign_2_reg_127) + unsigned(ap_const_lv8_1));
    m_axi_cost_in_m_img_ARADDR <= tmp_2_fu_257_p1(32 - 1 downto 0);
    m_axi_cost_in_m_img_ARBURST <= ap_const_lv2_0;
    m_axi_cost_in_m_img_ARCACHE <= ap_const_lv4_0;
    m_axi_cost_in_m_img_ARID <= ap_const_lv1_0;
    m_axi_cost_in_m_img_ARLEN <= ap_const_lv32_1E;
    m_axi_cost_in_m_img_ARLOCK <= ap_const_lv2_0;
    m_axi_cost_in_m_img_ARPROT <= ap_const_lv3_0;
    m_axi_cost_in_m_img_ARQOS <= ap_const_lv4_0;
    m_axi_cost_in_m_img_ARREGION <= ap_const_lv4_0;
    m_axi_cost_in_m_img_ARSIZE <= ap_const_lv3_0;
    m_axi_cost_in_m_img_ARUSER <= ap_const_lv1_0;

    m_axi_cost_in_m_img_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_cost_in_m_img_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_cost_in_m_img_ARVALID <= ap_const_logic_1;
        else 
            m_axi_cost_in_m_img_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_cost_in_m_img_AWADDR <= ap_const_lv32_0;
    m_axi_cost_in_m_img_AWBURST <= ap_const_lv2_0;
    m_axi_cost_in_m_img_AWCACHE <= ap_const_lv4_0;
    m_axi_cost_in_m_img_AWID <= ap_const_lv1_0;
    m_axi_cost_in_m_img_AWLEN <= ap_const_lv32_0;
    m_axi_cost_in_m_img_AWLOCK <= ap_const_lv2_0;
    m_axi_cost_in_m_img_AWPROT <= ap_const_lv3_0;
    m_axi_cost_in_m_img_AWQOS <= ap_const_lv4_0;
    m_axi_cost_in_m_img_AWREGION <= ap_const_lv4_0;
    m_axi_cost_in_m_img_AWSIZE <= ap_const_lv3_0;
    m_axi_cost_in_m_img_AWUSER <= ap_const_lv1_0;
    m_axi_cost_in_m_img_AWVALID <= ap_const_logic_0;
    m_axi_cost_in_m_img_BREADY <= ap_const_logic_0;

    m_axi_cost_in_m_img_RREADY_assign_proc : process(m_axi_cost_in_m_img_RVALID, ap_CS_fsm_state11, exitcond_fu_272_p2, ap_block_state11_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0)))) and (exitcond_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_cost_in_m_img_RREADY <= ap_const_logic_1;
        else 
            m_axi_cost_in_m_img_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_cost_in_m_img_WDATA <= ap_const_lv32_0;
    m_axi_cost_in_m_img_WID <= ap_const_lv1_0;
    m_axi_cost_in_m_img_WLAST <= ap_const_logic_0;
    m_axi_cost_in_m_img_WSTRB <= ap_const_lv4_0;
    m_axi_cost_in_m_img_WUSER <= ap_const_lv1_0;
    m_axi_cost_in_m_img_WVALID <= ap_const_logic_0;
    m_axi_disp_out_m_img_ARADDR <= ap_const_lv32_0;
    m_axi_disp_out_m_img_ARBURST <= ap_const_lv2_0;
    m_axi_disp_out_m_img_ARCACHE <= ap_const_lv4_0;
    m_axi_disp_out_m_img_ARID <= ap_const_lv1_0;
    m_axi_disp_out_m_img_ARLEN <= ap_const_lv32_0;
    m_axi_disp_out_m_img_ARLOCK <= ap_const_lv2_0;
    m_axi_disp_out_m_img_ARPROT <= ap_const_lv3_0;
    m_axi_disp_out_m_img_ARQOS <= ap_const_lv4_0;
    m_axi_disp_out_m_img_ARREGION <= ap_const_lv4_0;
    m_axi_disp_out_m_img_ARSIZE <= ap_const_lv3_0;
    m_axi_disp_out_m_img_ARUSER <= ap_const_lv1_0;
    m_axi_disp_out_m_img_ARVALID <= ap_const_logic_0;
    m_axi_disp_out_m_img_AWADDR <= tmp_fu_191_p1(32 - 1 downto 0);
    m_axi_disp_out_m_img_AWBURST <= ap_const_lv2_0;
    m_axi_disp_out_m_img_AWCACHE <= ap_const_lv4_0;
    m_axi_disp_out_m_img_AWID <= ap_const_lv1_0;
    m_axi_disp_out_m_img_AWLEN <= ap_const_lv32_E1;
    m_axi_disp_out_m_img_AWLOCK <= ap_const_lv2_0;
    m_axi_disp_out_m_img_AWPROT <= ap_const_lv3_0;
    m_axi_disp_out_m_img_AWQOS <= ap_const_lv4_0;
    m_axi_disp_out_m_img_AWREGION <= ap_const_lv4_0;
    m_axi_disp_out_m_img_AWSIZE <= ap_const_lv3_0;
    m_axi_disp_out_m_img_AWUSER <= ap_const_lv1_0;

    m_axi_disp_out_m_img_AWVALID_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_179_p2, ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY)
    begin
        if (((exitcond3_fu_179_p2 = ap_const_lv1_0) and (ap_reg_ioackin_m_axi_disp_out_m_img_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_disp_out_m_img_AWVALID <= ap_const_logic_1;
        else 
            m_axi_disp_out_m_img_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_disp_out_m_img_BREADY_assign_proc : process(m_axi_disp_out_m_img_BVALID, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_disp_out_m_img_BVALID = ap_const_logic_1))) then 
            m_axi_disp_out_m_img_BREADY <= ap_const_logic_1;
        else 
            m_axi_disp_out_m_img_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_disp_out_m_img_RREADY <= ap_const_logic_0;
    m_axi_disp_out_m_img_WDATA <= min_d1_reg_138(8 - 1 downto 0);
    m_axi_disp_out_m_img_WID <= ap_const_lv1_0;
    m_axi_disp_out_m_img_WLAST <= ap_const_logic_0;
    m_axi_disp_out_m_img_WSTRB <= ap_const_lv1_1;
    m_axi_disp_out_m_img_WUSER <= ap_const_lv1_0;

    m_axi_disp_out_m_img_WVALID_assign_proc : process(m_axi_cost_in_m_img_RVALID, ap_CS_fsm_state11, exitcond_fu_272_p2, ap_reg_ioackin_m_axi_disp_out_m_img_WREADY)
    begin
        if ((not(((exitcond_fu_272_p2 = ap_const_lv1_0) and (m_axi_cost_in_m_img_RVALID = ap_const_logic_0))) and (ap_reg_ioackin_m_axi_disp_out_m_img_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_272_p2 = ap_const_lv1_1))) then 
            m_axi_disp_out_m_img_WVALID <= ap_const_logic_1;
        else 
            m_axi_disp_out_m_img_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    min_c_2_min_c_fu_301_p3 <= 
        min_c_1_reg_359 when (tmp_5_fu_289_p2(0) = '1') else 
        min_c_reg_150;
    min_d_cast1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_d_reg_162),32));
    next_mul_fu_173_p2 <= std_logic_vector(unsigned(phi_mul_reg_115) + unsigned(ap_const_lv16_E1));
    p_fu_218_p2 <= std_logic_vector(unsigned(phi_mul_reg_115) + unsigned(j_assign_2_cast5_fu_202_p1));
    p_shl1_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_236_p3),22));
    p_shl1_fu_236_p3 <= (p_fu_218_p2 & ap_const_lv1_0);
    p_shl_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_224_p3),22));
    p_shl_fu_224_p3 <= (p_fu_218_p2 & ap_const_lv5_0);
        tmp_1_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_335),32));

    tmp_2_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_254_p1),64));
    tmp_5_fu_289_p2 <= "1" when (signed(min_c_1_reg_359) < signed(min_c_reg_150)) else "0";
    tmp_9_fu_248_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_232_p1) - unsigned(p_shl1_cast_fu_244_p1));
    tmp_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_115),64));
end behav;
