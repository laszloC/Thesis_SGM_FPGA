-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity comp_d_map is
generic (
    C_M_AXI_IMG_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMG_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMG_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COST_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_COST_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_COST_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COST_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_COST_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COST_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COST_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COST_BUS_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_IMG_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_IMG_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMG_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMG_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMG_BUS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_COST_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_COST_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_COST_BUS_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IMG_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_IMG_BUS_AWREADY : IN STD_LOGIC;
    m_axi_IMG_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_IMG_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ID_WIDTH-1 downto 0);
    m_axi_IMG_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMG_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_IMG_BUS_WVALID : OUT STD_LOGIC;
    m_axi_IMG_BUS_WREADY : IN STD_LOGIC;
    m_axi_IMG_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_DATA_WIDTH-1 downto 0);
    m_axi_IMG_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_IMG_BUS_WLAST : OUT STD_LOGIC;
    m_axi_IMG_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ID_WIDTH-1 downto 0);
    m_axi_IMG_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_IMG_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_IMG_BUS_ARREADY : IN STD_LOGIC;
    m_axi_IMG_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_IMG_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ID_WIDTH-1 downto 0);
    m_axi_IMG_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMG_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_IMG_BUS_RVALID : IN STD_LOGIC;
    m_axi_IMG_BUS_RREADY : OUT STD_LOGIC;
    m_axi_IMG_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_DATA_WIDTH-1 downto 0);
    m_axi_IMG_BUS_RLAST : IN STD_LOGIC;
    m_axi_IMG_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ID_WIDTH-1 downto 0);
    m_axi_IMG_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_IMG_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BUS_BVALID : IN STD_LOGIC;
    m_axi_IMG_BUS_BREADY : OUT STD_LOGIC;
    m_axi_IMG_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_ID_WIDTH-1 downto 0);
    m_axi_IMG_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_BUS_BUSER_WIDTH-1 downto 0);
    m_axi_COST_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_COST_BUS_AWREADY : IN STD_LOGIC;
    m_axi_COST_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_COST_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ID_WIDTH-1 downto 0);
    m_axi_COST_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_COST_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_COST_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_COST_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_COST_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_COST_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_COST_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_COST_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_COST_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_COST_BUS_WVALID : OUT STD_LOGIC;
    m_axi_COST_BUS_WREADY : IN STD_LOGIC;
    m_axi_COST_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_DATA_WIDTH-1 downto 0);
    m_axi_COST_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_COST_BUS_WLAST : OUT STD_LOGIC;
    m_axi_COST_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ID_WIDTH-1 downto 0);
    m_axi_COST_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_COST_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_COST_BUS_ARREADY : IN STD_LOGIC;
    m_axi_COST_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_COST_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ID_WIDTH-1 downto 0);
    m_axi_COST_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_COST_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_COST_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_COST_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_COST_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_COST_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_COST_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_COST_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_COST_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_COST_BUS_RVALID : IN STD_LOGIC;
    m_axi_COST_BUS_RREADY : OUT STD_LOGIC;
    m_axi_COST_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_DATA_WIDTH-1 downto 0);
    m_axi_COST_BUS_RLAST : IN STD_LOGIC;
    m_axi_COST_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ID_WIDTH-1 downto 0);
    m_axi_COST_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_COST_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_COST_BUS_BVALID : IN STD_LOGIC;
    m_axi_COST_BUS_BREADY : OUT STD_LOGIC;
    m_axi_COST_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_COST_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_ID_WIDTH-1 downto 0);
    m_axi_COST_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_COST_BUS_BUSER_WIDTH-1 downto 0);
    s_axi_IMG_BUS_AWVALID : IN STD_LOGIC;
    s_axi_IMG_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_IMG_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IMG_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_IMG_BUS_WVALID : IN STD_LOGIC;
    s_axi_IMG_BUS_WREADY : OUT STD_LOGIC;
    s_axi_IMG_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_IMG_BUS_DATA_WIDTH-1 downto 0);
    s_axi_IMG_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_IMG_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_IMG_BUS_ARVALID : IN STD_LOGIC;
    s_axi_IMG_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_IMG_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IMG_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_IMG_BUS_RVALID : OUT STD_LOGIC;
    s_axi_IMG_BUS_RREADY : IN STD_LOGIC;
    s_axi_IMG_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_IMG_BUS_DATA_WIDTH-1 downto 0);
    s_axi_IMG_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_IMG_BUS_BVALID : OUT STD_LOGIC;
    s_axi_IMG_BUS_BREADY : IN STD_LOGIC;
    s_axi_IMG_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of comp_d_map is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "comp_d_map,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=367506352,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2054,HLS_SYN_LUT=3562,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv16_E1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100001";
    constant ap_const_lv8_BC : STD_LOGIC_VECTOR (7 downto 0) := "10111100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv9_BC : STD_LOGIC_VECTOR (8 downto 0) := "010111100";
    constant ap_const_lv17_E1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000011100001";
    constant ap_const_lv9_E1 : STD_LOGIC_VECTOR (8 downto 0) := "011100001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal img_left : STD_LOGIC_VECTOR (31 downto 0);
    signal img_right : STD_LOGIC_VECTOR (31 downto 0);
    signal disp_out : STD_LOGIC_VECTOR (31 downto 0);
    signal img_cost : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG_BUS_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal IMG_BUS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal IMG_BUS_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal exitcond_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal IMG_BUS_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal COST_BUS_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal COST_BUS_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond1_i_i_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal COST_BUS_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal IMG_BUS_AWVALID : STD_LOGIC;
    signal IMG_BUS_AWREADY : STD_LOGIC;
    signal IMG_BUS_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG_BUS_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG_BUS_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal IMG_BUS_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal IMG_BUS_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal IMG_BUS_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal IMG_BUS_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal IMG_BUS_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal IMG_BUS_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal IMG_BUS_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_WVALID : STD_LOGIC;
    signal IMG_BUS_WREADY : STD_LOGIC;
    signal IMG_BUS_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal IMG_BUS_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_WLAST : STD_LOGIC;
    signal IMG_BUS_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_ARVALID : STD_LOGIC;
    signal IMG_BUS_ARREADY : STD_LOGIC;
    signal IMG_BUS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG_BUS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG_BUS_RVALID : STD_LOGIC;
    signal IMG_BUS_RREADY : STD_LOGIC;
    signal IMG_BUS_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal IMG_BUS_RLAST : STD_LOGIC;
    signal IMG_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMG_BUS_BVALID : STD_LOGIC;
    signal IMG_BUS_BREADY : STD_LOGIC;
    signal IMG_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMG_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal COST_BUS_AWVALID : STD_LOGIC;
    signal COST_BUS_AWREADY : STD_LOGIC;
    signal COST_BUS_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal COST_BUS_WVALID : STD_LOGIC;
    signal COST_BUS_WREADY : STD_LOGIC;
    signal COST_BUS_ARVALID : STD_LOGIC;
    signal COST_BUS_ARREADY : STD_LOGIC;
    signal COST_BUS_RVALID : STD_LOGIC;
    signal COST_BUS_RREADY : STD_LOGIC;
    signal COST_BUS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal COST_BUS_RLAST : STD_LOGIC;
    signal COST_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal COST_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal COST_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal COST_BUS_BVALID : STD_LOGIC;
    signal COST_BUS_BREADY : STD_LOGIC;
    signal COST_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal COST_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal COST_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_cast_fu_355_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_cast_reg_783 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_cast_fu_359_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_cast_reg_788 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_cast_fu_363_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_cast_reg_793 : STD_LOGIC_VECTOR (32 downto 0);
    signal next_mul_fu_367_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_798 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_i_fu_389_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_cast_i_reg_811 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i9_fu_435_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_i9_reg_825 : STD_LOGIC_VECTOR (21 downto 0);
    signal exitcond2_i_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_COST_BUS_AWREADY : STD_LOGIC;
    signal d_fu_465_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_reg_839 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal nj_fu_471_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal nj_reg_844 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal li_cast_i_i_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal li_cast_i_i_reg_849 : STD_LOGIC_VECTOR (8 downto 0);
    signal cli_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal cli_reg_857 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_ioackin_COST_BUS_WREADY : STD_LOGIC;
    signal ap_block_state6_io : BOOLEAN;
    signal tmp_7_i_i_i_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i_i_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_505_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_i_i_reg_868 : STD_LOGIC_VECTOR (16 downto 0);
    signal crj_fu_530_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal crj_reg_877 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_i_i_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_i_i_8_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_i_i_8_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUS_addr_1_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG_BUS_addr_2_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal dj_fu_623_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal dj_reg_901 : STD_LOGIC_VECTOR (2 downto 0);
    signal di_fu_629_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal IMG_BUS_addr_1_read_reg_911 : STD_LOGIC_VECTOR (7 downto 0);
    signal IMG_BUS_addr_2_read_reg_916 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal next_mul1_fu_728_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul1_reg_926 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_fu_740_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_934 : STD_LOGIC_VECTOR (7 downto 0);
    signal IMG_BUS_addr_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_771_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state31 : BOOLEAN;
    signal IMG_BUS_addr_read_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_comp_disps_fu_347_ap_start : STD_LOGIC;
    signal grp_comp_disps_fu_347_ap_done : STD_LOGIC;
    signal grp_comp_disps_fu_347_ap_idle : STD_LOGIC;
    signal grp_comp_disps_fu_347_ap_ready : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWVALID : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_WVALID : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_WLAST : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARVALID : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_RREADY : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_cost_in_m_img_BREADY : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWVALID : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_WVALID : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_WLAST : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARVALID : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_RREADY : STD_LOGIC;
    signal grp_comp_disps_fu_347_m_axi_disp_out_m_img_BREADY : STD_LOGIC;
    signal ni_reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_i_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_i_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cj_reg_255 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_i_i_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal di_i_i_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_1_i_i_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal dj_i_i_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_assign_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal phi_mul1_reg_325 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_assign_reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_IMG_BUS_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMG_BUS_AWREADY : STD_LOGIC;
    signal grp_comp_disps_fu_347_ap_start_reg : STD_LOGIC := '0';
    signal tmp_7_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal left_m_img_sum_cast_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal right_m_img_sum_cast_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_COST_BUS_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_COST_BUS_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMG_BUS_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_IMG_BUS_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_IMG_BUS_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMG_BUS_WREADY : STD_LOGIC := '0';
    signal tmp_8_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast5_i_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ci_fu_405_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_i_fu_411_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl1_i_fu_423_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl_cast_i_fu_419_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl1_cast_i_fu_431_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cj_cast1_i_fu_455_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal di_cast_i_i_fu_480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_i_i_fu_505_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dj_cast_i_i_fu_511_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal clj_fu_521_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_fu_539_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_544_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_i_i_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal clj_cast6_i_i_fu_526_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_i_9_fu_575_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_i_i_cast_fu_580_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal left_m_img_sum_fu_584_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal crj_cast5_i_i_fu_535_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_i_i_fu_599_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_i_i_cast_fu_604_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal right_m_img_sum_fu_608_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_i1_i_i_fu_635_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_639_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_cast_i_i_fu_658_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_cast_i_i_fu_661_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_assign_i_i_fu_664_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_670_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i8_i_i_fu_678_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_assign_1_i_i_fu_684_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_assign_1_cast_i_i_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i5_i_i_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_i_i_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_i_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_746_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_fu_750_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component comp_disps IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_cost_in_m_img_AWVALID : OUT STD_LOGIC;
        m_axi_cost_in_m_img_AWREADY : IN STD_LOGIC;
        m_axi_cost_in_m_img_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cost_in_m_img_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cost_in_m_img_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cost_in_m_img_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cost_in_m_img_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cost_in_m_img_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cost_in_m_img_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cost_in_m_img_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cost_in_m_img_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cost_in_m_img_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_WVALID : OUT STD_LOGIC;
        m_axi_cost_in_m_img_WREADY : IN STD_LOGIC;
        m_axi_cost_in_m_img_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cost_in_m_img_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cost_in_m_img_WLAST : OUT STD_LOGIC;
        m_axi_cost_in_m_img_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_ARVALID : OUT STD_LOGIC;
        m_axi_cost_in_m_img_ARREADY : IN STD_LOGIC;
        m_axi_cost_in_m_img_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cost_in_m_img_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cost_in_m_img_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cost_in_m_img_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cost_in_m_img_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cost_in_m_img_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cost_in_m_img_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cost_in_m_img_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cost_in_m_img_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cost_in_m_img_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_RVALID : IN STD_LOGIC;
        m_axi_cost_in_m_img_RREADY : OUT STD_LOGIC;
        m_axi_cost_in_m_img_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cost_in_m_img_RLAST : IN STD_LOGIC;
        m_axi_cost_in_m_img_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cost_in_m_img_BVALID : IN STD_LOGIC;
        m_axi_cost_in_m_img_BREADY : OUT STD_LOGIC;
        m_axi_cost_in_m_img_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cost_in_m_img_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cost_in_m_img_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_AWVALID : OUT STD_LOGIC;
        m_axi_disp_out_m_img_AWREADY : IN STD_LOGIC;
        m_axi_disp_out_m_img_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_disp_out_m_img_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_disp_out_m_img_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_disp_out_m_img_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_disp_out_m_img_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_disp_out_m_img_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_disp_out_m_img_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_disp_out_m_img_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_disp_out_m_img_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_disp_out_m_img_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_WVALID : OUT STD_LOGIC;
        m_axi_disp_out_m_img_WREADY : IN STD_LOGIC;
        m_axi_disp_out_m_img_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_disp_out_m_img_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_WLAST : OUT STD_LOGIC;
        m_axi_disp_out_m_img_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_ARVALID : OUT STD_LOGIC;
        m_axi_disp_out_m_img_ARREADY : IN STD_LOGIC;
        m_axi_disp_out_m_img_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_disp_out_m_img_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_disp_out_m_img_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_disp_out_m_img_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_disp_out_m_img_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_disp_out_m_img_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_disp_out_m_img_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_disp_out_m_img_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_disp_out_m_img_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_disp_out_m_img_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_RVALID : IN STD_LOGIC;
        m_axi_disp_out_m_img_RREADY : OUT STD_LOGIC;
        m_axi_disp_out_m_img_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_disp_out_m_img_RLAST : IN STD_LOGIC;
        m_axi_disp_out_m_img_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_disp_out_m_img_BVALID : IN STD_LOGIC;
        m_axi_disp_out_m_img_BREADY : OUT STD_LOGIC;
        m_axi_disp_out_m_img_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_disp_out_m_img_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_disp_out_m_img_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component comp_d_map_IMG_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        img_left : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_right : OUT STD_LOGIC_VECTOR (31 downto 0);
        disp_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cost : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component comp_d_map_IMG_BUS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component comp_d_map_COST_BUS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    comp_d_map_IMG_BUS_s_axi_U : component comp_d_map_IMG_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_IMG_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_IMG_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_IMG_BUS_AWVALID,
        AWREADY => s_axi_IMG_BUS_AWREADY,
        AWADDR => s_axi_IMG_BUS_AWADDR,
        WVALID => s_axi_IMG_BUS_WVALID,
        WREADY => s_axi_IMG_BUS_WREADY,
        WDATA => s_axi_IMG_BUS_WDATA,
        WSTRB => s_axi_IMG_BUS_WSTRB,
        ARVALID => s_axi_IMG_BUS_ARVALID,
        ARREADY => s_axi_IMG_BUS_ARREADY,
        ARADDR => s_axi_IMG_BUS_ARADDR,
        RVALID => s_axi_IMG_BUS_RVALID,
        RREADY => s_axi_IMG_BUS_RREADY,
        RDATA => s_axi_IMG_BUS_RDATA,
        RRESP => s_axi_IMG_BUS_RRESP,
        BVALID => s_axi_IMG_BUS_BVALID,
        BREADY => s_axi_IMG_BUS_BREADY,
        BRESP => s_axi_IMG_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        img_left => img_left,
        img_right => img_right,
        disp_out => disp_out,
        img_cost => img_cost);

    comp_d_map_IMG_BUS_m_axi_U : component comp_d_map_IMG_BUS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMG_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMG_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMG_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMG_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMG_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMG_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMG_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMG_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMG_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMG_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMG_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMG_BUS_AWVALID,
        AWREADY => m_axi_IMG_BUS_AWREADY,
        AWADDR => m_axi_IMG_BUS_AWADDR,
        AWID => m_axi_IMG_BUS_AWID,
        AWLEN => m_axi_IMG_BUS_AWLEN,
        AWSIZE => m_axi_IMG_BUS_AWSIZE,
        AWBURST => m_axi_IMG_BUS_AWBURST,
        AWLOCK => m_axi_IMG_BUS_AWLOCK,
        AWCACHE => m_axi_IMG_BUS_AWCACHE,
        AWPROT => m_axi_IMG_BUS_AWPROT,
        AWQOS => m_axi_IMG_BUS_AWQOS,
        AWREGION => m_axi_IMG_BUS_AWREGION,
        AWUSER => m_axi_IMG_BUS_AWUSER,
        WVALID => m_axi_IMG_BUS_WVALID,
        WREADY => m_axi_IMG_BUS_WREADY,
        WDATA => m_axi_IMG_BUS_WDATA,
        WSTRB => m_axi_IMG_BUS_WSTRB,
        WLAST => m_axi_IMG_BUS_WLAST,
        WID => m_axi_IMG_BUS_WID,
        WUSER => m_axi_IMG_BUS_WUSER,
        ARVALID => m_axi_IMG_BUS_ARVALID,
        ARREADY => m_axi_IMG_BUS_ARREADY,
        ARADDR => m_axi_IMG_BUS_ARADDR,
        ARID => m_axi_IMG_BUS_ARID,
        ARLEN => m_axi_IMG_BUS_ARLEN,
        ARSIZE => m_axi_IMG_BUS_ARSIZE,
        ARBURST => m_axi_IMG_BUS_ARBURST,
        ARLOCK => m_axi_IMG_BUS_ARLOCK,
        ARCACHE => m_axi_IMG_BUS_ARCACHE,
        ARPROT => m_axi_IMG_BUS_ARPROT,
        ARQOS => m_axi_IMG_BUS_ARQOS,
        ARREGION => m_axi_IMG_BUS_ARREGION,
        ARUSER => m_axi_IMG_BUS_ARUSER,
        RVALID => m_axi_IMG_BUS_RVALID,
        RREADY => m_axi_IMG_BUS_RREADY,
        RDATA => m_axi_IMG_BUS_RDATA,
        RLAST => m_axi_IMG_BUS_RLAST,
        RID => m_axi_IMG_BUS_RID,
        RUSER => m_axi_IMG_BUS_RUSER,
        RRESP => m_axi_IMG_BUS_RRESP,
        BVALID => m_axi_IMG_BUS_BVALID,
        BREADY => m_axi_IMG_BUS_BREADY,
        BRESP => m_axi_IMG_BUS_BRESP,
        BID => m_axi_IMG_BUS_BID,
        BUSER => m_axi_IMG_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMG_BUS_ARVALID,
        I_ARREADY => IMG_BUS_ARREADY,
        I_ARADDR => IMG_BUS_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => IMG_BUS_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMG_BUS_RVALID,
        I_RREADY => IMG_BUS_RREADY,
        I_RDATA => IMG_BUS_RDATA,
        I_RID => IMG_BUS_RID,
        I_RUSER => IMG_BUS_RUSER,
        I_RRESP => IMG_BUS_RRESP,
        I_RLAST => IMG_BUS_RLAST,
        I_AWVALID => IMG_BUS_AWVALID,
        I_AWREADY => IMG_BUS_AWREADY,
        I_AWADDR => IMG_BUS_AWADDR,
        I_AWID => IMG_BUS_AWID,
        I_AWLEN => IMG_BUS_AWLEN,
        I_AWSIZE => IMG_BUS_AWSIZE,
        I_AWLOCK => IMG_BUS_AWLOCK,
        I_AWCACHE => IMG_BUS_AWCACHE,
        I_AWQOS => IMG_BUS_AWQOS,
        I_AWPROT => IMG_BUS_AWPROT,
        I_AWUSER => IMG_BUS_AWUSER,
        I_AWBURST => IMG_BUS_AWBURST,
        I_AWREGION => IMG_BUS_AWREGION,
        I_WVALID => IMG_BUS_WVALID,
        I_WREADY => IMG_BUS_WREADY,
        I_WDATA => IMG_BUS_WDATA,
        I_WID => IMG_BUS_WID,
        I_WUSER => IMG_BUS_WUSER,
        I_WLAST => IMG_BUS_WLAST,
        I_WSTRB => IMG_BUS_WSTRB,
        I_BVALID => IMG_BUS_BVALID,
        I_BREADY => IMG_BUS_BREADY,
        I_BRESP => IMG_BUS_BRESP,
        I_BID => IMG_BUS_BID,
        I_BUSER => IMG_BUS_BUSER);

    comp_d_map_COST_BUS_m_axi_U : component comp_d_map_COST_BUS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_COST_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_COST_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_COST_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_COST_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_COST_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_COST_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_COST_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_COST_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_COST_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_COST_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_COST_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_COST_BUS_AWVALID,
        AWREADY => m_axi_COST_BUS_AWREADY,
        AWADDR => m_axi_COST_BUS_AWADDR,
        AWID => m_axi_COST_BUS_AWID,
        AWLEN => m_axi_COST_BUS_AWLEN,
        AWSIZE => m_axi_COST_BUS_AWSIZE,
        AWBURST => m_axi_COST_BUS_AWBURST,
        AWLOCK => m_axi_COST_BUS_AWLOCK,
        AWCACHE => m_axi_COST_BUS_AWCACHE,
        AWPROT => m_axi_COST_BUS_AWPROT,
        AWQOS => m_axi_COST_BUS_AWQOS,
        AWREGION => m_axi_COST_BUS_AWREGION,
        AWUSER => m_axi_COST_BUS_AWUSER,
        WVALID => m_axi_COST_BUS_WVALID,
        WREADY => m_axi_COST_BUS_WREADY,
        WDATA => m_axi_COST_BUS_WDATA,
        WSTRB => m_axi_COST_BUS_WSTRB,
        WLAST => m_axi_COST_BUS_WLAST,
        WID => m_axi_COST_BUS_WID,
        WUSER => m_axi_COST_BUS_WUSER,
        ARVALID => m_axi_COST_BUS_ARVALID,
        ARREADY => m_axi_COST_BUS_ARREADY,
        ARADDR => m_axi_COST_BUS_ARADDR,
        ARID => m_axi_COST_BUS_ARID,
        ARLEN => m_axi_COST_BUS_ARLEN,
        ARSIZE => m_axi_COST_BUS_ARSIZE,
        ARBURST => m_axi_COST_BUS_ARBURST,
        ARLOCK => m_axi_COST_BUS_ARLOCK,
        ARCACHE => m_axi_COST_BUS_ARCACHE,
        ARPROT => m_axi_COST_BUS_ARPROT,
        ARQOS => m_axi_COST_BUS_ARQOS,
        ARREGION => m_axi_COST_BUS_ARREGION,
        ARUSER => m_axi_COST_BUS_ARUSER,
        RVALID => m_axi_COST_BUS_RVALID,
        RREADY => m_axi_COST_BUS_RREADY,
        RDATA => m_axi_COST_BUS_RDATA,
        RLAST => m_axi_COST_BUS_RLAST,
        RID => m_axi_COST_BUS_RID,
        RUSER => m_axi_COST_BUS_RUSER,
        RRESP => m_axi_COST_BUS_RRESP,
        BVALID => m_axi_COST_BUS_BVALID,
        BREADY => m_axi_COST_BUS_BREADY,
        BRESP => m_axi_COST_BUS_BRESP,
        BID => m_axi_COST_BUS_BID,
        BUSER => m_axi_COST_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => COST_BUS_ARVALID,
        I_ARREADY => COST_BUS_ARREADY,
        I_ARADDR => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARADDR,
        I_ARID => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARID,
        I_ARLEN => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLEN,
        I_ARSIZE => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARSIZE,
        I_ARLOCK => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLOCK,
        I_ARCACHE => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARCACHE,
        I_ARQOS => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARQOS,
        I_ARPROT => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARPROT,
        I_ARUSER => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARUSER,
        I_ARBURST => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARBURST,
        I_ARREGION => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARREGION,
        I_RVALID => COST_BUS_RVALID,
        I_RREADY => COST_BUS_RREADY,
        I_RDATA => COST_BUS_RDATA,
        I_RID => COST_BUS_RID,
        I_RUSER => COST_BUS_RUSER,
        I_RRESP => COST_BUS_RRESP,
        I_RLAST => COST_BUS_RLAST,
        I_AWVALID => COST_BUS_AWVALID,
        I_AWREADY => COST_BUS_AWREADY,
        I_AWADDR => COST_BUS_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1E,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => COST_BUS_WVALID,
        I_WREADY => COST_BUS_WREADY,
        I_WDATA => sum_i_i_reg_266,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => COST_BUS_BVALID,
        I_BREADY => COST_BUS_BREADY,
        I_BRESP => COST_BUS_BRESP,
        I_BID => COST_BUS_BID,
        I_BUSER => COST_BUS_BUSER);

    grp_comp_disps_fu_347 : component comp_disps
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_comp_disps_fu_347_ap_start,
        ap_done => grp_comp_disps_fu_347_ap_done,
        ap_idle => grp_comp_disps_fu_347_ap_idle,
        ap_ready => grp_comp_disps_fu_347_ap_ready,
        m_axi_cost_in_m_img_AWVALID => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWVALID,
        m_axi_cost_in_m_img_AWREADY => ap_const_logic_0,
        m_axi_cost_in_m_img_AWADDR => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWADDR,
        m_axi_cost_in_m_img_AWID => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWID,
        m_axi_cost_in_m_img_AWLEN => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLEN,
        m_axi_cost_in_m_img_AWSIZE => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWSIZE,
        m_axi_cost_in_m_img_AWBURST => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWBURST,
        m_axi_cost_in_m_img_AWLOCK => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLOCK,
        m_axi_cost_in_m_img_AWCACHE => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWCACHE,
        m_axi_cost_in_m_img_AWPROT => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWPROT,
        m_axi_cost_in_m_img_AWQOS => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWQOS,
        m_axi_cost_in_m_img_AWREGION => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWREGION,
        m_axi_cost_in_m_img_AWUSER => grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWUSER,
        m_axi_cost_in_m_img_WVALID => grp_comp_disps_fu_347_m_axi_cost_in_m_img_WVALID,
        m_axi_cost_in_m_img_WREADY => ap_const_logic_0,
        m_axi_cost_in_m_img_WDATA => grp_comp_disps_fu_347_m_axi_cost_in_m_img_WDATA,
        m_axi_cost_in_m_img_WSTRB => grp_comp_disps_fu_347_m_axi_cost_in_m_img_WSTRB,
        m_axi_cost_in_m_img_WLAST => grp_comp_disps_fu_347_m_axi_cost_in_m_img_WLAST,
        m_axi_cost_in_m_img_WID => grp_comp_disps_fu_347_m_axi_cost_in_m_img_WID,
        m_axi_cost_in_m_img_WUSER => grp_comp_disps_fu_347_m_axi_cost_in_m_img_WUSER,
        m_axi_cost_in_m_img_ARVALID => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARVALID,
        m_axi_cost_in_m_img_ARREADY => COST_BUS_ARREADY,
        m_axi_cost_in_m_img_ARADDR => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARADDR,
        m_axi_cost_in_m_img_ARID => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARID,
        m_axi_cost_in_m_img_ARLEN => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLEN,
        m_axi_cost_in_m_img_ARSIZE => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARSIZE,
        m_axi_cost_in_m_img_ARBURST => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARBURST,
        m_axi_cost_in_m_img_ARLOCK => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLOCK,
        m_axi_cost_in_m_img_ARCACHE => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARCACHE,
        m_axi_cost_in_m_img_ARPROT => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARPROT,
        m_axi_cost_in_m_img_ARQOS => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARQOS,
        m_axi_cost_in_m_img_ARREGION => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARREGION,
        m_axi_cost_in_m_img_ARUSER => grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARUSER,
        m_axi_cost_in_m_img_RVALID => COST_BUS_RVALID,
        m_axi_cost_in_m_img_RREADY => grp_comp_disps_fu_347_m_axi_cost_in_m_img_RREADY,
        m_axi_cost_in_m_img_RDATA => COST_BUS_RDATA,
        m_axi_cost_in_m_img_RLAST => COST_BUS_RLAST,
        m_axi_cost_in_m_img_RID => COST_BUS_RID,
        m_axi_cost_in_m_img_RUSER => COST_BUS_RUSER,
        m_axi_cost_in_m_img_RRESP => COST_BUS_RRESP,
        m_axi_cost_in_m_img_BVALID => ap_const_logic_0,
        m_axi_cost_in_m_img_BREADY => grp_comp_disps_fu_347_m_axi_cost_in_m_img_BREADY,
        m_axi_cost_in_m_img_BRESP => ap_const_lv2_0,
        m_axi_cost_in_m_img_BID => ap_const_lv1_0,
        m_axi_cost_in_m_img_BUSER => ap_const_lv1_0,
        m_axi_disp_out_m_img_AWVALID => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWVALID,
        m_axi_disp_out_m_img_AWREADY => IMG_BUS_AWREADY,
        m_axi_disp_out_m_img_AWADDR => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWADDR,
        m_axi_disp_out_m_img_AWID => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWID,
        m_axi_disp_out_m_img_AWLEN => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLEN,
        m_axi_disp_out_m_img_AWSIZE => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWSIZE,
        m_axi_disp_out_m_img_AWBURST => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWBURST,
        m_axi_disp_out_m_img_AWLOCK => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLOCK,
        m_axi_disp_out_m_img_AWCACHE => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWCACHE,
        m_axi_disp_out_m_img_AWPROT => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWPROT,
        m_axi_disp_out_m_img_AWQOS => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWQOS,
        m_axi_disp_out_m_img_AWREGION => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWREGION,
        m_axi_disp_out_m_img_AWUSER => grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWUSER,
        m_axi_disp_out_m_img_WVALID => grp_comp_disps_fu_347_m_axi_disp_out_m_img_WVALID,
        m_axi_disp_out_m_img_WREADY => IMG_BUS_WREADY,
        m_axi_disp_out_m_img_WDATA => grp_comp_disps_fu_347_m_axi_disp_out_m_img_WDATA,
        m_axi_disp_out_m_img_WSTRB => grp_comp_disps_fu_347_m_axi_disp_out_m_img_WSTRB,
        m_axi_disp_out_m_img_WLAST => grp_comp_disps_fu_347_m_axi_disp_out_m_img_WLAST,
        m_axi_disp_out_m_img_WID => grp_comp_disps_fu_347_m_axi_disp_out_m_img_WID,
        m_axi_disp_out_m_img_WUSER => grp_comp_disps_fu_347_m_axi_disp_out_m_img_WUSER,
        m_axi_disp_out_m_img_ARVALID => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARVALID,
        m_axi_disp_out_m_img_ARREADY => ap_const_logic_0,
        m_axi_disp_out_m_img_ARADDR => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARADDR,
        m_axi_disp_out_m_img_ARID => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARID,
        m_axi_disp_out_m_img_ARLEN => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLEN,
        m_axi_disp_out_m_img_ARSIZE => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARSIZE,
        m_axi_disp_out_m_img_ARBURST => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARBURST,
        m_axi_disp_out_m_img_ARLOCK => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLOCK,
        m_axi_disp_out_m_img_ARCACHE => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARCACHE,
        m_axi_disp_out_m_img_ARPROT => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARPROT,
        m_axi_disp_out_m_img_ARQOS => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARQOS,
        m_axi_disp_out_m_img_ARREGION => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARREGION,
        m_axi_disp_out_m_img_ARUSER => grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARUSER,
        m_axi_disp_out_m_img_RVALID => ap_const_logic_0,
        m_axi_disp_out_m_img_RREADY => grp_comp_disps_fu_347_m_axi_disp_out_m_img_RREADY,
        m_axi_disp_out_m_img_RDATA => ap_const_lv8_0,
        m_axi_disp_out_m_img_RLAST => ap_const_logic_0,
        m_axi_disp_out_m_img_RID => ap_const_lv1_0,
        m_axi_disp_out_m_img_RUSER => ap_const_lv1_0,
        m_axi_disp_out_m_img_RRESP => ap_const_lv2_0,
        m_axi_disp_out_m_img_BVALID => IMG_BUS_BVALID,
        m_axi_disp_out_m_img_BREADY => grp_comp_disps_fu_347_m_axi_disp_out_m_img_BREADY,
        m_axi_disp_out_m_img_BRESP => IMG_BUS_BRESP,
        m_axi_disp_out_m_img_BID => IMG_BUS_BID,
        m_axi_disp_out_m_img_BUSER => IMG_BUS_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_COST_BUS_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_COST_BUS_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_COST_BUS_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_COST_BUS_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = COST_BUS_AWREADY)) then 
                        ap_reg_ioackin_COST_BUS_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_COST_BUS_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_COST_BUS_WREADY <= ap_const_logic_0;
            else
                if (((exitcond1_i_i_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    if ((ap_const_boolean_0 = ap_block_state6_io)) then 
                        ap_reg_ioackin_COST_BUS_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = COST_BUS_WREADY)) then 
                        ap_reg_ioackin_COST_BUS_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMG_BUS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMG_BUS_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_IMG_BUS_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_sig_ioackin_IMG_BUS_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_sig_ioackin_IMG_BUS_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    ap_reg_ioackin_IMG_BUS_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = IMG_BUS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = IMG_BUS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = IMG_BUS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    ap_reg_ioackin_IMG_BUS_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMG_BUS_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMG_BUS_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    if ((ap_sig_ioackin_IMG_BUS_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_IMG_BUS_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMG_BUS_AWREADY)) then 
                        ap_reg_ioackin_IMG_BUS_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMG_BUS_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMG_BUS_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                    if ((ap_sig_ioackin_IMG_BUS_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_IMG_BUS_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMG_BUS_WREADY)) then 
                        ap_reg_ioackin_IMG_BUS_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_comp_disps_fu_347_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_comp_disps_fu_347_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_comp_disps_fu_347_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_comp_disps_fu_347_ap_ready = ap_const_logic_1)) then 
                    grp_comp_disps_fu_347_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cj_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_COST_BUS_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                cj_reg_255 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                cj_reg_255 <= d_reg_839;
            end if; 
        end if;
    end process;

    di_i_i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                di_i_i_reg_279 <= di_fu_629_p2;
            elsif (((exitcond_i_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                di_i_i_reg_279 <= ap_const_lv3_6;
            end if; 
        end if;
    end process;

    dj_i_i_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                dj_i_i_reg_303 <= ap_const_lv3_6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                dj_i_i_reg_303 <= dj_reg_901;
            end if; 
        end if;
    end process;

    i_assign_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = IMG_BUS_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_assign_reg_314 <= i_reg_934;
            elsif (((grp_comp_disps_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_assign_reg_314 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_assign_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_IMG_BUS_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                j_assign_reg_336 <= ap_const_lv8_0;
            elsif (((ap_sig_ioackin_IMG_BUS_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                j_assign_reg_336 <= j_reg_949;
            end if; 
        end if;
    end process;

    j_i_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_i_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_reg_244 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = COST_BUS_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                j_i_reg_244 <= j_1_reg_820;
            end if; 
        end if;
    end process;

    ni_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ni_reg_220 <= i_1_reg_806;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ni_reg_220 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = IMG_BUS_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                phi_mul1_reg_325 <= next_mul1_reg_926;
            elsif (((grp_comp_disps_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                phi_mul1_reg_325 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_232 <= next_mul_reg_798;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_232 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    sum_1_i_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_1_i_i_reg_291 <= sum_i_i_reg_266;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                sum_1_i_i_reg_291 <= sum_2_fu_721_p3;
            end if; 
        end if;
    end process;

    sum_i_i_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_i_i_reg_266 <= sum_1_i_i_reg_291;
            elsif (((exitcond_i_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_i_i_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = IMG_BUS_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                IMG_BUS_addr_1_read_reg_911 <= IMG_BUS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                IMG_BUS_addr_1_reg_889 <= left_m_img_sum_cast_fu_589_p1(32 - 1 downto 0);
                IMG_BUS_addr_2_reg_895 <= right_m_img_sum_cast_fu_613_p1(32 - 1 downto 0);
                crj_reg_877 <= crj_fu_530_p2;
                dj_reg_901 <= dj_fu_623_p2;
                tmp_8_i_i_i_8_reg_883 <= tmp_8_i_i_i_8_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = IMG_BUS_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                IMG_BUS_addr_2_read_reg_916 <= IMG_BUS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = IMG_BUS_RVALID) and (exitcond_fu_765_p2 = ap_const_lv1_0))) and (exitcond_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                IMG_BUS_addr_read_reg_954 <= IMG_BUS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                IMG_BUS_addr_reg_939 <= tmp_5_fu_755_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cli_reg_857 <= cli_fu_490_p2;
                tmp_7_i_i_i_reg_863 <= tmp_7_i_i_i_fu_499_p2;
                tmp_9_i_i_reg_868 <= tmp_9_i_i_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                d_reg_839 <= d_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_806 <= i_1_fu_379_p2;
                next_mul_reg_798 <= next_mul_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_reg_934 <= i_fu_740_p2;
                next_mul1_reg_926 <= next_mul1_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_820 <= j_1_fu_399_p2;
                    j_cast_i_reg_811(7 downto 0) <= j_cast_i_fu_389_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = IMG_BUS_RVALID) and (exitcond_fu_765_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                j_reg_949 <= j_fu_771_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    li_cast_i_i_reg_849(7 downto 0) <= li_cast_i_i_fu_476_p1(7 downto 0);
                nj_reg_844 <= nj_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_1_cast_reg_783 <= tmp_1_cast_fu_355_p1;
                tmp_2_cast_reg_788 <= tmp_2_cast_fu_359_p1;
                tmp_3_cast_reg_793 <= tmp_3_cast_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_4_i9_reg_825(21 downto 1) <= tmp_4_i9_fu_435_p2(21 downto 1);
            end if;
        end if;
    end process;
    j_cast_i_reg_811(8) <= '0';
    tmp_4_i9_reg_825(0) <= '0';
    li_cast_i_i_reg_849(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state31, exitcond_fu_765_p2, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state4, ap_CS_fsm_state6, exitcond1_i_i_fu_484_p2, ap_CS_fsm_state21, IMG_BUS_RVALID, IMG_BUS_BVALID, COST_BUS_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_i_fu_393_p2, ap_sig_ioackin_COST_BUS_AWREADY, ap_CS_fsm_state5, exitcond_i_fu_459_p2, ap_block_state6_io, ap_CS_fsm_state7, exitcond_i_i_fu_515_p2, ap_CS_fsm_state23, exitcond1_fu_734_p2, grp_comp_disps_fu_347_ap_done, exitcond3_i_fu_373_p2, ap_CS_fsm_state22, ap_sig_ioackin_IMG_BUS_WREADY, ap_sig_ioackin_IMG_BUS_AWREADY, ap_sig_ioackin_IMG_BUS_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_i_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_i_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_COST_BUS_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_i_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond_i_i_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_sig_ioackin_IMG_BUS_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_sig_ioackin_IMG_BUS_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = IMG_BUS_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = IMG_BUS_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = COST_BUS_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((grp_comp_disps_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((exitcond1_fu_734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_sig_ioackin_IMG_BUS_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_sig_ioackin_IMG_BUS_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if ((not(((ap_const_logic_0 = IMG_BUS_RVALID) and (exitcond_fu_765_p2 = ap_const_lv1_0))) and (exitcond_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif ((not(((ap_const_logic_0 = IMG_BUS_RVALID) and (exitcond_fu_765_p2 = ap_const_lv1_0))) and (exitcond_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_sig_ioackin_IMG_BUS_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = IMG_BUS_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    COST_BUS_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARVALID, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            COST_BUS_ARVALID <= grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARVALID;
        else 
            COST_BUS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    COST_BUS_AWADDR <= tmp_7_fu_444_p1(32 - 1 downto 0);

    COST_BUS_AWVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_COST_BUS_AWREADY)
    begin
        if (((ap_reg_ioackin_COST_BUS_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            COST_BUS_AWVALID <= ap_const_logic_1;
        else 
            COST_BUS_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    COST_BUS_BREADY_assign_proc : process(ap_CS_fsm_state21, COST_BUS_BVALID)
    begin
        if (((ap_const_logic_1 = COST_BUS_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            COST_BUS_BREADY <= ap_const_logic_1;
        else 
            COST_BUS_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    COST_BUS_RREADY_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_cost_in_m_img_RREADY, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            COST_BUS_RREADY <= grp_comp_disps_fu_347_m_axi_cost_in_m_img_RREADY;
        else 
            COST_BUS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    COST_BUS_WVALID_assign_proc : process(ap_CS_fsm_state6, exitcond1_i_i_fu_484_p2, ap_reg_ioackin_COST_BUS_WREADY)
    begin
        if (((ap_reg_ioackin_COST_BUS_WREADY = ap_const_logic_0) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            COST_BUS_WVALID <= ap_const_logic_1;
        else 
            COST_BUS_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    COST_BUS_blk_n_AW_assign_proc : process(m_axi_COST_BUS_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            COST_BUS_blk_n_AW <= m_axi_COST_BUS_AWREADY;
        else 
            COST_BUS_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    COST_BUS_blk_n_B_assign_proc : process(m_axi_COST_BUS_BVALID, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            COST_BUS_blk_n_B <= m_axi_COST_BUS_BVALID;
        else 
            COST_BUS_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    COST_BUS_blk_n_W_assign_proc : process(m_axi_COST_BUS_WREADY, ap_CS_fsm_state6, exitcond1_i_i_fu_484_p2)
    begin
        if (((exitcond1_i_i_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            COST_BUS_blk_n_W <= m_axi_COST_BUS_WREADY;
        else 
            COST_BUS_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    IMG_BUS_ARADDR_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state24, IMG_BUS_addr_1_reg_889, IMG_BUS_addr_2_reg_895, IMG_BUS_addr_reg_939, ap_reg_ioackin_IMG_BUS_ARREADY)
    begin
        if ((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                IMG_BUS_ARADDR <= IMG_BUS_addr_reg_939;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                IMG_BUS_ARADDR <= IMG_BUS_addr_2_reg_895;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                IMG_BUS_ARADDR <= IMG_BUS_addr_1_reg_889;
            else 
                IMG_BUS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            IMG_BUS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG_BUS_ARLEN_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_reg_ioackin_IMG_BUS_ARREADY)
    begin
        if (((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            IMG_BUS_ARLEN <= ap_const_lv32_E1;
        elsif ((((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            IMG_BUS_ARLEN <= ap_const_lv32_1;
        else 
            IMG_BUS_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG_BUS_ARVALID_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_reg_ioackin_IMG_BUS_ARREADY)
    begin
        if ((((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            IMG_BUS_ARVALID <= ap_const_logic_1;
        else 
            IMG_BUS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMG_BUS_AWADDR_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state2, IMG_BUS_addr_reg_939, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWADDR, exitcond3_i_fu_373_p2, ap_CS_fsm_state22, ap_reg_ioackin_IMG_BUS_AWREADY)
    begin
        if (((ap_reg_ioackin_IMG_BUS_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            IMG_BUS_AWADDR <= IMG_BUS_addr_reg_939;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWADDR <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWADDR;
        else 
            IMG_BUS_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG_BUS_AWBURST_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWBURST, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWBURST <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWBURST;
        else 
            IMG_BUS_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    IMG_BUS_AWCACHE_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWCACHE, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWCACHE <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWCACHE;
        else 
            IMG_BUS_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    IMG_BUS_AWID_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWID, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWID <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWID;
        else 
            IMG_BUS_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    IMG_BUS_AWLEN_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLEN, exitcond3_i_fu_373_p2, ap_CS_fsm_state22, ap_reg_ioackin_IMG_BUS_AWREADY)
    begin
        if (((ap_reg_ioackin_IMG_BUS_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            IMG_BUS_AWLEN <= ap_const_lv32_E1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWLEN <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLEN;
        else 
            IMG_BUS_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG_BUS_AWLOCK_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLOCK, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWLOCK <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLOCK;
        else 
            IMG_BUS_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    IMG_BUS_AWPROT_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWPROT, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWPROT <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWPROT;
        else 
            IMG_BUS_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    IMG_BUS_AWQOS_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWQOS, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWQOS <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWQOS;
        else 
            IMG_BUS_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    IMG_BUS_AWREGION_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWREGION, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWREGION <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWREGION;
        else 
            IMG_BUS_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    IMG_BUS_AWSIZE_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWSIZE, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWSIZE <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWSIZE;
        else 
            IMG_BUS_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    IMG_BUS_AWUSER_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWUSER, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWUSER <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWUSER;
        else 
            IMG_BUS_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    IMG_BUS_AWVALID_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWVALID, exitcond3_i_fu_373_p2, ap_CS_fsm_state22, ap_reg_ioackin_IMG_BUS_AWREADY)
    begin
        if (((ap_reg_ioackin_IMG_BUS_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            IMG_BUS_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_AWVALID <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWVALID;
        else 
            IMG_BUS_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMG_BUS_BREADY_assign_proc : process(ap_CS_fsm_state36, IMG_BUS_BVALID, ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_BREADY, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = IMG_BUS_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            IMG_BUS_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_BREADY <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_BREADY;
        else 
            IMG_BUS_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMG_BUS_RREADY_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state31, exitcond_fu_765_p2, IMG_BUS_RVALID)
    begin
        if (((not(((ap_const_logic_0 = IMG_BUS_RVALID) and (exitcond_fu_765_p2 = ap_const_lv1_0))) and (exitcond_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = IMG_BUS_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = IMG_BUS_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            IMG_BUS_RREADY <= ap_const_logic_1;
        else 
            IMG_BUS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMG_BUS_WDATA_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_WDATA, exitcond3_i_fu_373_p2, ap_CS_fsm_state22, ap_reg_ioackin_IMG_BUS_WREADY, tmp_8_fu_777_p2)
    begin
        if (((ap_reg_ioackin_IMG_BUS_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            IMG_BUS_WDATA <= tmp_8_fu_777_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_WDATA <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_WDATA;
        else 
            IMG_BUS_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    IMG_BUS_WID_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_WID, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_WID <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_WID;
        else 
            IMG_BUS_WID <= ap_const_lv1_0;
        end if; 
    end process;


    IMG_BUS_WLAST_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_WLAST, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_WLAST <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_WLAST;
        else 
            IMG_BUS_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    IMG_BUS_WSTRB_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_WSTRB, exitcond3_i_fu_373_p2, ap_CS_fsm_state22, ap_reg_ioackin_IMG_BUS_WREADY)
    begin
        if (((ap_reg_ioackin_IMG_BUS_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            IMG_BUS_WSTRB <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_WSTRB <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_WSTRB;
        else 
            IMG_BUS_WSTRB <= "X";
        end if; 
    end process;


    IMG_BUS_WUSER_assign_proc : process(ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_WUSER, exitcond3_i_fu_373_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_WUSER <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_WUSER;
        else 
            IMG_BUS_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    IMG_BUS_WVALID_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state2, grp_comp_disps_fu_347_m_axi_disp_out_m_img_WVALID, exitcond3_i_fu_373_p2, ap_CS_fsm_state22, ap_reg_ioackin_IMG_BUS_WREADY)
    begin
        if (((ap_reg_ioackin_IMG_BUS_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            IMG_BUS_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond3_i_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IMG_BUS_WVALID <= grp_comp_disps_fu_347_m_axi_disp_out_m_img_WVALID;
        else 
            IMG_BUS_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMG_BUS_blk_n_AR_assign_proc : process(m_axi_IMG_BUS_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            IMG_BUS_blk_n_AR <= m_axi_IMG_BUS_ARREADY;
        else 
            IMG_BUS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMG_BUS_blk_n_AW_assign_proc : process(m_axi_IMG_BUS_AWREADY, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            IMG_BUS_blk_n_AW <= m_axi_IMG_BUS_AWREADY;
        else 
            IMG_BUS_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    IMG_BUS_blk_n_B_assign_proc : process(m_axi_IMG_BUS_BVALID, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            IMG_BUS_blk_n_B <= m_axi_IMG_BUS_BVALID;
        else 
            IMG_BUS_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    IMG_BUS_blk_n_R_assign_proc : process(m_axi_IMG_BUS_RVALID, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state31, exitcond_fu_765_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((exitcond_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            IMG_BUS_blk_n_R <= m_axi_IMG_BUS_RVALID;
        else 
            IMG_BUS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IMG_BUS_blk_n_W_assign_proc : process(m_axi_IMG_BUS_WREADY, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            IMG_BUS_blk_n_W <= m_axi_IMG_BUS_WREADY;
        else 
            IMG_BUS_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        a_assign_1_cast_i_i_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_assign_1_i_i_fu_684_p3),32));

    a_assign_1_i_i_fu_684_p3 <= 
        tmp_i8_i_i_fu_678_p2 when (tmp_11_fu_670_p3(0) = '1') else 
        a_assign_i_i_fu_664_p2;
    a_assign_i_i_fu_664_p2 <= std_logic_vector(unsigned(l_cast_i_i_fu_658_p1) - unsigned(r_cast_i_i_fu_661_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state31_assign_proc : process(exitcond_fu_765_p2, IMG_BUS_RVALID)
    begin
                ap_block_state31 <= ((ap_const_logic_0 = IMG_BUS_RVALID) and (exitcond_fu_765_p2 = ap_const_lv1_0));
    end process;


    ap_block_state6_io_assign_proc : process(exitcond1_i_i_fu_484_p2, ap_sig_ioackin_COST_BUS_WREADY)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_COST_BUS_WREADY = ap_const_logic_0) and (exitcond1_i_i_fu_484_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23, exitcond1_fu_734_p2)
    begin
        if (((exitcond1_fu_734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, exitcond1_fu_734_p2)
    begin
        if (((exitcond1_fu_734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_COST_BUS_AWREADY_assign_proc : process(COST_BUS_AWREADY, ap_reg_ioackin_COST_BUS_AWREADY)
    begin
        if ((ap_reg_ioackin_COST_BUS_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_COST_BUS_AWREADY <= COST_BUS_AWREADY;
        else 
            ap_sig_ioackin_COST_BUS_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_COST_BUS_WREADY_assign_proc : process(COST_BUS_WREADY, ap_reg_ioackin_COST_BUS_WREADY)
    begin
        if ((ap_reg_ioackin_COST_BUS_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_COST_BUS_WREADY <= COST_BUS_WREADY;
        else 
            ap_sig_ioackin_COST_BUS_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMG_BUS_ARREADY_assign_proc : process(IMG_BUS_ARREADY, ap_reg_ioackin_IMG_BUS_ARREADY)
    begin
        if ((ap_reg_ioackin_IMG_BUS_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMG_BUS_ARREADY <= IMG_BUS_ARREADY;
        else 
            ap_sig_ioackin_IMG_BUS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMG_BUS_AWREADY_assign_proc : process(IMG_BUS_AWREADY, ap_reg_ioackin_IMG_BUS_AWREADY)
    begin
        if ((ap_reg_ioackin_IMG_BUS_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMG_BUS_AWREADY <= IMG_BUS_AWREADY;
        else 
            ap_sig_ioackin_IMG_BUS_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMG_BUS_WREADY_assign_proc : process(IMG_BUS_WREADY, ap_reg_ioackin_IMG_BUS_WREADY)
    begin
        if ((ap_reg_ioackin_IMG_BUS_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMG_BUS_WREADY <= IMG_BUS_WREADY;
        else 
            ap_sig_ioackin_IMG_BUS_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    ci_fu_405_p2 <= std_logic_vector(unsigned(phi_mul_reg_232) + unsigned(j_cast5_i_fu_385_p1));
    cj_cast1_i_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cj_reg_255),9));
    cli_fu_490_p2 <= std_logic_vector(signed(di_cast_i_i_fu_480_p1) + signed(li_cast_i_i_reg_849));
        clj_cast6_i_i_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(clj_fu_521_p2),17));

    clj_fu_521_p2 <= std_logic_vector(unsigned(j_cast_i_reg_811) + unsigned(dj_cast_i_i_fu_511_p1));
        crj_cast5_i_i_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(crj_fu_530_p2),17));

    crj_fu_530_p2 <= std_logic_vector(unsigned(nj_reg_844) + unsigned(dj_cast_i_i_fu_511_p1));
    d_fu_465_p2 <= std_logic_vector(unsigned(cj_reg_255) + unsigned(ap_const_lv5_1));
        di_cast_i_i_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(di_i_i_reg_279),9));

    di_fu_629_p2 <= std_logic_vector(signed(di_i_i_reg_279) + signed(ap_const_lv3_1));
        dj_cast_i_i_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dj_i_i_reg_303),9));

    dj_fu_623_p2 <= std_logic_vector(signed(dj_i_i_reg_303) + signed(ap_const_lv3_1));
    exitcond1_fu_734_p2 <= "1" when (i_assign_reg_314 = ap_const_lv8_BC) else "0";
    exitcond1_i_i_fu_484_p2 <= "1" when (di_i_i_reg_279 = ap_const_lv3_3) else "0";
    exitcond2_i_fu_393_p2 <= "1" when (j_i_reg_244 = ap_const_lv8_E1) else "0";
    exitcond3_i_fu_373_p2 <= "1" when (ni_reg_220 = ap_const_lv8_BC) else "0";
    exitcond_fu_765_p2 <= "1" when (j_assign_reg_336 = ap_const_lv8_E1) else "0";
    exitcond_i_fu_459_p2 <= "1" when (cj_reg_255 = ap_const_lv5_1E) else "0";
    exitcond_i_i_fu_515_p2 <= "1" when (dj_i_i_reg_303 = ap_const_lv3_3) else "0";
    grp_comp_disps_fu_347_ap_start <= grp_comp_disps_fu_347_ap_start_reg;
    i_1_fu_379_p2 <= std_logic_vector(unsigned(ni_reg_220) + unsigned(ap_const_lv8_1));
    i_fu_740_p2 <= std_logic_vector(unsigned(i_assign_reg_314) + unsigned(ap_const_lv8_1));
    j_1_fu_399_p2 <= std_logic_vector(unsigned(j_i_reg_244) + unsigned(ap_const_lv8_1));
    j_cast5_i_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_244),16));
    j_cast_i_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_244),9));
    j_fu_771_p2 <= std_logic_vector(unsigned(j_assign_reg_336) + unsigned(ap_const_lv8_1));
    l_cast_i_i_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IMG_BUS_addr_1_read_reg_911),9));
        left_m_img_sum_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(left_m_img_sum_fu_584_p2),64));

    left_m_img_sum_fu_584_p2 <= std_logic_vector(signed(tmp_1_i_i_cast_fu_580_p1) + signed(tmp_3_cast_reg_793));
    li_cast_i_i_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ni_reg_220),9));
    next_mul1_fu_728_p2 <= std_logic_vector(unsigned(phi_mul1_reg_325) + unsigned(ap_const_lv16_E1));
    next_mul_fu_367_p2 <= std_logic_vector(unsigned(phi_mul_reg_232) + unsigned(ap_const_lv16_E1));
    nj_fu_471_p2 <= std_logic_vector(unsigned(j_cast_i_reg_811) - unsigned(cj_cast1_i_fu_455_p1));
    p_shl1_cast_i_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_fu_423_p3),22));
    p_shl1_i_fu_423_p3 <= (ci_fu_405_p2 & ap_const_lv1_0);
    p_shl_cast_i_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_411_p3),22));
    p_shl_i_fu_411_p3 <= (ci_fu_405_p2 & ap_const_lv5_0);
    r_cast_i_i_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IMG_BUS_addr_2_read_reg_916),9));
    rev1_fu_647_p2 <= (tmp_10_fu_639_p3 xor ap_const_lv1_1);
    rev_fu_552_p2 <= (tmp_9_fu_544_p3 xor ap_const_lv1_1);
        right_m_img_sum_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(right_m_img_sum_fu_608_p2),64));

    right_m_img_sum_fu_608_p2 <= std_logic_vector(signed(tmp_4_i_i_cast_fu_604_p1) + signed(tmp_2_cast_reg_788));
    sel_tmp_i_i_fu_707_p2 <= (tmp4_i_i_fu_702_p2 and rev1_fu_647_p2);
    sum_1_fu_713_p3 <= 
        sum_fu_696_p2 when (sel_tmp_i_i_fu_707_p2(0) = '1') else 
        sum_1_i_i_reg_291;
    sum_2_fu_721_p3 <= 
        sum_1_fu_713_p3 when (tmp_8_i_i_i_8_reg_883(0) = '1') else 
        sum_1_i_i_reg_291;
    sum_fu_696_p2 <= std_logic_vector(unsigned(sum_1_i_i_reg_291) + unsigned(a_assign_1_cast_i_i_fu_692_p1));
    tmp4_i_i_fu_702_p2 <= (tmp_8_i_i_i_8_reg_883 and tmp_8_i5_i_i_fu_653_p2);
    tmp_10_fu_639_p3 <= tmp_i1_i_i_fu_635_p2(8 downto 8);
    tmp_11_fu_670_p3 <= a_assign_i_i_fu_664_p2(8 downto 8);
        tmp_1_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(disp_out),33));

        tmp_1_i_i_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_9_fu_575_p2),33));

        tmp_2_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(img_right),33));

        tmp_3_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(img_left),33));

    tmp_3_i_i_fu_599_p2 <= std_logic_vector(signed(crj_cast5_i_i_fu_535_p1) + signed(tmp_9_i_i_reg_868));
    tmp_4_fu_750_p2 <= std_logic_vector(unsigned(tmp_fu_746_p1) + unsigned(tmp_1_cast_reg_783));
    tmp_4_i9_fu_435_p2 <= std_logic_vector(unsigned(p_shl_cast_i_fu_419_p1) - unsigned(p_shl1_cast_i_fu_431_p1));
        tmp_4_i_i_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_i_i_fu_599_p2),33));

        tmp_5_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_750_p2),64));

        tmp_6_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_i9_reg_825),32));

    tmp_7_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_441_p1),64));
    tmp_7_i_i_i_fu_499_p2 <= "1" when (signed(cli_fu_490_p2) < signed(ap_const_lv9_BC)) else "0";
    tmp_8_fu_777_p2 <= std_logic_vector(shift_left(unsigned(IMG_BUS_addr_read_reg_954),to_integer(unsigned('0' & ap_const_lv8_3(8-1 downto 0)))));
    tmp_8_i5_i_i_fu_653_p2 <= "1" when (signed(crj_reg_877) < signed(ap_const_lv9_E1)) else "0";
    tmp_8_i_i_i_8_fu_569_p2 <= (tmp_i_i_fu_564_p2 and rev_fu_552_p2);
    tmp_8_i_i_i_fu_558_p2 <= "1" when (signed(clj_fu_521_p2) < signed(ap_const_lv9_E1)) else "0";
    tmp_9_fu_544_p3 <= tmp_i_i_i_fu_539_p2(8 downto 8);
    tmp_9_i_i_fu_505_p0 <= cli_fu_490_p2;
    tmp_9_i_i_fu_505_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_9_i_i_fu_505_p0) * signed('0' &ap_const_lv17_E1))), 17));
    tmp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_325),33));
    tmp_i1_i_i_fu_635_p2 <= (crj_reg_877 or cli_reg_857);
    tmp_i8_i_i_fu_678_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(a_assign_i_i_fu_664_p2));
    tmp_i_i_9_fu_575_p2 <= std_logic_vector(signed(clj_cast6_i_i_fu_526_p1) + signed(tmp_9_i_i_reg_868));
    tmp_i_i_fu_564_p2 <= (tmp_8_i_i_i_fu_558_p2 and tmp_7_i_i_i_reg_863);
    tmp_i_i_i_fu_539_p2 <= (clj_fu_521_p2 or cli_reg_857);
end behav;
