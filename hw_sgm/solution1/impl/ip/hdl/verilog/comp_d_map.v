// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="comp_d_map,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=367506352,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2054,HLS_SYN_LUT=3562,HLS_VERSION=2018_3}" *)

module comp_d_map (
        ap_clk,
        ap_rst_n,
        m_axi_IMG_BUS_AWVALID,
        m_axi_IMG_BUS_AWREADY,
        m_axi_IMG_BUS_AWADDR,
        m_axi_IMG_BUS_AWID,
        m_axi_IMG_BUS_AWLEN,
        m_axi_IMG_BUS_AWSIZE,
        m_axi_IMG_BUS_AWBURST,
        m_axi_IMG_BUS_AWLOCK,
        m_axi_IMG_BUS_AWCACHE,
        m_axi_IMG_BUS_AWPROT,
        m_axi_IMG_BUS_AWQOS,
        m_axi_IMG_BUS_AWREGION,
        m_axi_IMG_BUS_AWUSER,
        m_axi_IMG_BUS_WVALID,
        m_axi_IMG_BUS_WREADY,
        m_axi_IMG_BUS_WDATA,
        m_axi_IMG_BUS_WSTRB,
        m_axi_IMG_BUS_WLAST,
        m_axi_IMG_BUS_WID,
        m_axi_IMG_BUS_WUSER,
        m_axi_IMG_BUS_ARVALID,
        m_axi_IMG_BUS_ARREADY,
        m_axi_IMG_BUS_ARADDR,
        m_axi_IMG_BUS_ARID,
        m_axi_IMG_BUS_ARLEN,
        m_axi_IMG_BUS_ARSIZE,
        m_axi_IMG_BUS_ARBURST,
        m_axi_IMG_BUS_ARLOCK,
        m_axi_IMG_BUS_ARCACHE,
        m_axi_IMG_BUS_ARPROT,
        m_axi_IMG_BUS_ARQOS,
        m_axi_IMG_BUS_ARREGION,
        m_axi_IMG_BUS_ARUSER,
        m_axi_IMG_BUS_RVALID,
        m_axi_IMG_BUS_RREADY,
        m_axi_IMG_BUS_RDATA,
        m_axi_IMG_BUS_RLAST,
        m_axi_IMG_BUS_RID,
        m_axi_IMG_BUS_RUSER,
        m_axi_IMG_BUS_RRESP,
        m_axi_IMG_BUS_BVALID,
        m_axi_IMG_BUS_BREADY,
        m_axi_IMG_BUS_BRESP,
        m_axi_IMG_BUS_BID,
        m_axi_IMG_BUS_BUSER,
        m_axi_COST_BUS_AWVALID,
        m_axi_COST_BUS_AWREADY,
        m_axi_COST_BUS_AWADDR,
        m_axi_COST_BUS_AWID,
        m_axi_COST_BUS_AWLEN,
        m_axi_COST_BUS_AWSIZE,
        m_axi_COST_BUS_AWBURST,
        m_axi_COST_BUS_AWLOCK,
        m_axi_COST_BUS_AWCACHE,
        m_axi_COST_BUS_AWPROT,
        m_axi_COST_BUS_AWQOS,
        m_axi_COST_BUS_AWREGION,
        m_axi_COST_BUS_AWUSER,
        m_axi_COST_BUS_WVALID,
        m_axi_COST_BUS_WREADY,
        m_axi_COST_BUS_WDATA,
        m_axi_COST_BUS_WSTRB,
        m_axi_COST_BUS_WLAST,
        m_axi_COST_BUS_WID,
        m_axi_COST_BUS_WUSER,
        m_axi_COST_BUS_ARVALID,
        m_axi_COST_BUS_ARREADY,
        m_axi_COST_BUS_ARADDR,
        m_axi_COST_BUS_ARID,
        m_axi_COST_BUS_ARLEN,
        m_axi_COST_BUS_ARSIZE,
        m_axi_COST_BUS_ARBURST,
        m_axi_COST_BUS_ARLOCK,
        m_axi_COST_BUS_ARCACHE,
        m_axi_COST_BUS_ARPROT,
        m_axi_COST_BUS_ARQOS,
        m_axi_COST_BUS_ARREGION,
        m_axi_COST_BUS_ARUSER,
        m_axi_COST_BUS_RVALID,
        m_axi_COST_BUS_RREADY,
        m_axi_COST_BUS_RDATA,
        m_axi_COST_BUS_RLAST,
        m_axi_COST_BUS_RID,
        m_axi_COST_BUS_RUSER,
        m_axi_COST_BUS_RRESP,
        m_axi_COST_BUS_BVALID,
        m_axi_COST_BUS_BREADY,
        m_axi_COST_BUS_BRESP,
        m_axi_COST_BUS_BID,
        m_axi_COST_BUS_BUSER,
        s_axi_IMG_BUS_AWVALID,
        s_axi_IMG_BUS_AWREADY,
        s_axi_IMG_BUS_AWADDR,
        s_axi_IMG_BUS_WVALID,
        s_axi_IMG_BUS_WREADY,
        s_axi_IMG_BUS_WDATA,
        s_axi_IMG_BUS_WSTRB,
        s_axi_IMG_BUS_ARVALID,
        s_axi_IMG_BUS_ARREADY,
        s_axi_IMG_BUS_ARADDR,
        s_axi_IMG_BUS_RVALID,
        s_axi_IMG_BUS_RREADY,
        s_axi_IMG_BUS_RDATA,
        s_axi_IMG_BUS_RRESP,
        s_axi_IMG_BUS_BVALID,
        s_axi_IMG_BUS_BREADY,
        s_axi_IMG_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;
parameter    C_S_AXI_IMG_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_IMG_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IMG_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_IMG_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMG_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_IMG_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_BUS_USER_VALUE = 0;
parameter    C_M_AXI_IMG_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_IMG_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_COST_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_COST_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_COST_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_COST_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_COST_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_COST_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_COST_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_COST_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_COST_BUS_USER_VALUE = 0;
parameter    C_M_AXI_COST_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_COST_BUS_CACHE_VALUE = 3;

parameter C_S_AXI_IMG_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMG_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_COST_BUS_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IMG_BUS_AWVALID;
input   m_axi_IMG_BUS_AWREADY;
output  [C_M_AXI_IMG_BUS_ADDR_WIDTH - 1:0] m_axi_IMG_BUS_AWADDR;
output  [C_M_AXI_IMG_BUS_ID_WIDTH - 1:0] m_axi_IMG_BUS_AWID;
output  [7:0] m_axi_IMG_BUS_AWLEN;
output  [2:0] m_axi_IMG_BUS_AWSIZE;
output  [1:0] m_axi_IMG_BUS_AWBURST;
output  [1:0] m_axi_IMG_BUS_AWLOCK;
output  [3:0] m_axi_IMG_BUS_AWCACHE;
output  [2:0] m_axi_IMG_BUS_AWPROT;
output  [3:0] m_axi_IMG_BUS_AWQOS;
output  [3:0] m_axi_IMG_BUS_AWREGION;
output  [C_M_AXI_IMG_BUS_AWUSER_WIDTH - 1:0] m_axi_IMG_BUS_AWUSER;
output   m_axi_IMG_BUS_WVALID;
input   m_axi_IMG_BUS_WREADY;
output  [C_M_AXI_IMG_BUS_DATA_WIDTH - 1:0] m_axi_IMG_BUS_WDATA;
output  [C_M_AXI_IMG_BUS_WSTRB_WIDTH - 1:0] m_axi_IMG_BUS_WSTRB;
output   m_axi_IMG_BUS_WLAST;
output  [C_M_AXI_IMG_BUS_ID_WIDTH - 1:0] m_axi_IMG_BUS_WID;
output  [C_M_AXI_IMG_BUS_WUSER_WIDTH - 1:0] m_axi_IMG_BUS_WUSER;
output   m_axi_IMG_BUS_ARVALID;
input   m_axi_IMG_BUS_ARREADY;
output  [C_M_AXI_IMG_BUS_ADDR_WIDTH - 1:0] m_axi_IMG_BUS_ARADDR;
output  [C_M_AXI_IMG_BUS_ID_WIDTH - 1:0] m_axi_IMG_BUS_ARID;
output  [7:0] m_axi_IMG_BUS_ARLEN;
output  [2:0] m_axi_IMG_BUS_ARSIZE;
output  [1:0] m_axi_IMG_BUS_ARBURST;
output  [1:0] m_axi_IMG_BUS_ARLOCK;
output  [3:0] m_axi_IMG_BUS_ARCACHE;
output  [2:0] m_axi_IMG_BUS_ARPROT;
output  [3:0] m_axi_IMG_BUS_ARQOS;
output  [3:0] m_axi_IMG_BUS_ARREGION;
output  [C_M_AXI_IMG_BUS_ARUSER_WIDTH - 1:0] m_axi_IMG_BUS_ARUSER;
input   m_axi_IMG_BUS_RVALID;
output   m_axi_IMG_BUS_RREADY;
input  [C_M_AXI_IMG_BUS_DATA_WIDTH - 1:0] m_axi_IMG_BUS_RDATA;
input   m_axi_IMG_BUS_RLAST;
input  [C_M_AXI_IMG_BUS_ID_WIDTH - 1:0] m_axi_IMG_BUS_RID;
input  [C_M_AXI_IMG_BUS_RUSER_WIDTH - 1:0] m_axi_IMG_BUS_RUSER;
input  [1:0] m_axi_IMG_BUS_RRESP;
input   m_axi_IMG_BUS_BVALID;
output   m_axi_IMG_BUS_BREADY;
input  [1:0] m_axi_IMG_BUS_BRESP;
input  [C_M_AXI_IMG_BUS_ID_WIDTH - 1:0] m_axi_IMG_BUS_BID;
input  [C_M_AXI_IMG_BUS_BUSER_WIDTH - 1:0] m_axi_IMG_BUS_BUSER;
output   m_axi_COST_BUS_AWVALID;
input   m_axi_COST_BUS_AWREADY;
output  [C_M_AXI_COST_BUS_ADDR_WIDTH - 1:0] m_axi_COST_BUS_AWADDR;
output  [C_M_AXI_COST_BUS_ID_WIDTH - 1:0] m_axi_COST_BUS_AWID;
output  [7:0] m_axi_COST_BUS_AWLEN;
output  [2:0] m_axi_COST_BUS_AWSIZE;
output  [1:0] m_axi_COST_BUS_AWBURST;
output  [1:0] m_axi_COST_BUS_AWLOCK;
output  [3:0] m_axi_COST_BUS_AWCACHE;
output  [2:0] m_axi_COST_BUS_AWPROT;
output  [3:0] m_axi_COST_BUS_AWQOS;
output  [3:0] m_axi_COST_BUS_AWREGION;
output  [C_M_AXI_COST_BUS_AWUSER_WIDTH - 1:0] m_axi_COST_BUS_AWUSER;
output   m_axi_COST_BUS_WVALID;
input   m_axi_COST_BUS_WREADY;
output  [C_M_AXI_COST_BUS_DATA_WIDTH - 1:0] m_axi_COST_BUS_WDATA;
output  [C_M_AXI_COST_BUS_WSTRB_WIDTH - 1:0] m_axi_COST_BUS_WSTRB;
output   m_axi_COST_BUS_WLAST;
output  [C_M_AXI_COST_BUS_ID_WIDTH - 1:0] m_axi_COST_BUS_WID;
output  [C_M_AXI_COST_BUS_WUSER_WIDTH - 1:0] m_axi_COST_BUS_WUSER;
output   m_axi_COST_BUS_ARVALID;
input   m_axi_COST_BUS_ARREADY;
output  [C_M_AXI_COST_BUS_ADDR_WIDTH - 1:0] m_axi_COST_BUS_ARADDR;
output  [C_M_AXI_COST_BUS_ID_WIDTH - 1:0] m_axi_COST_BUS_ARID;
output  [7:0] m_axi_COST_BUS_ARLEN;
output  [2:0] m_axi_COST_BUS_ARSIZE;
output  [1:0] m_axi_COST_BUS_ARBURST;
output  [1:0] m_axi_COST_BUS_ARLOCK;
output  [3:0] m_axi_COST_BUS_ARCACHE;
output  [2:0] m_axi_COST_BUS_ARPROT;
output  [3:0] m_axi_COST_BUS_ARQOS;
output  [3:0] m_axi_COST_BUS_ARREGION;
output  [C_M_AXI_COST_BUS_ARUSER_WIDTH - 1:0] m_axi_COST_BUS_ARUSER;
input   m_axi_COST_BUS_RVALID;
output   m_axi_COST_BUS_RREADY;
input  [C_M_AXI_COST_BUS_DATA_WIDTH - 1:0] m_axi_COST_BUS_RDATA;
input   m_axi_COST_BUS_RLAST;
input  [C_M_AXI_COST_BUS_ID_WIDTH - 1:0] m_axi_COST_BUS_RID;
input  [C_M_AXI_COST_BUS_RUSER_WIDTH - 1:0] m_axi_COST_BUS_RUSER;
input  [1:0] m_axi_COST_BUS_RRESP;
input   m_axi_COST_BUS_BVALID;
output   m_axi_COST_BUS_BREADY;
input  [1:0] m_axi_COST_BUS_BRESP;
input  [C_M_AXI_COST_BUS_ID_WIDTH - 1:0] m_axi_COST_BUS_BID;
input  [C_M_AXI_COST_BUS_BUSER_WIDTH - 1:0] m_axi_COST_BUS_BUSER;
input   s_axi_IMG_BUS_AWVALID;
output   s_axi_IMG_BUS_AWREADY;
input  [C_S_AXI_IMG_BUS_ADDR_WIDTH - 1:0] s_axi_IMG_BUS_AWADDR;
input   s_axi_IMG_BUS_WVALID;
output   s_axi_IMG_BUS_WREADY;
input  [C_S_AXI_IMG_BUS_DATA_WIDTH - 1:0] s_axi_IMG_BUS_WDATA;
input  [C_S_AXI_IMG_BUS_WSTRB_WIDTH - 1:0] s_axi_IMG_BUS_WSTRB;
input   s_axi_IMG_BUS_ARVALID;
output   s_axi_IMG_BUS_ARREADY;
input  [C_S_AXI_IMG_BUS_ADDR_WIDTH - 1:0] s_axi_IMG_BUS_ARADDR;
output   s_axi_IMG_BUS_RVALID;
input   s_axi_IMG_BUS_RREADY;
output  [C_S_AXI_IMG_BUS_DATA_WIDTH - 1:0] s_axi_IMG_BUS_RDATA;
output  [1:0] s_axi_IMG_BUS_RRESP;
output   s_axi_IMG_BUS_BVALID;
input   s_axi_IMG_BUS_BREADY;
output  [1:0] s_axi_IMG_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] img_left;
wire   [31:0] img_right;
wire   [31:0] disp_out;
wire   [31:0] img_cost;
reg    IMG_BUS_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    IMG_BUS_blk_n_R;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state24;
reg    IMG_BUS_blk_n_AW;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire   [0:0] exitcond_fu_765_p2;
reg    IMG_BUS_blk_n_W;
wire    ap_CS_fsm_state32;
reg    IMG_BUS_blk_n_B;
wire    ap_CS_fsm_state36;
reg    COST_BUS_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    COST_BUS_blk_n_W;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond1_i_i_fu_484_p2;
reg    COST_BUS_blk_n_B;
wire    ap_CS_fsm_state21;
reg    IMG_BUS_AWVALID;
wire    IMG_BUS_AWREADY;
reg   [31:0] IMG_BUS_AWADDR;
reg   [0:0] IMG_BUS_AWID;
reg   [31:0] IMG_BUS_AWLEN;
reg   [2:0] IMG_BUS_AWSIZE;
reg   [1:0] IMG_BUS_AWBURST;
reg   [1:0] IMG_BUS_AWLOCK;
reg   [3:0] IMG_BUS_AWCACHE;
reg   [2:0] IMG_BUS_AWPROT;
reg   [3:0] IMG_BUS_AWQOS;
reg   [3:0] IMG_BUS_AWREGION;
reg   [0:0] IMG_BUS_AWUSER;
reg    IMG_BUS_WVALID;
wire    IMG_BUS_WREADY;
reg   [7:0] IMG_BUS_WDATA;
reg   [0:0] IMG_BUS_WSTRB;
reg    IMG_BUS_WLAST;
reg   [0:0] IMG_BUS_WID;
reg   [0:0] IMG_BUS_WUSER;
reg    IMG_BUS_ARVALID;
wire    IMG_BUS_ARREADY;
reg   [31:0] IMG_BUS_ARADDR;
reg   [31:0] IMG_BUS_ARLEN;
wire    IMG_BUS_RVALID;
reg    IMG_BUS_RREADY;
wire   [7:0] IMG_BUS_RDATA;
wire    IMG_BUS_RLAST;
wire   [0:0] IMG_BUS_RID;
wire   [0:0] IMG_BUS_RUSER;
wire   [1:0] IMG_BUS_RRESP;
wire    IMG_BUS_BVALID;
reg    IMG_BUS_BREADY;
wire   [1:0] IMG_BUS_BRESP;
wire   [0:0] IMG_BUS_BID;
wire   [0:0] IMG_BUS_BUSER;
reg    COST_BUS_AWVALID;
wire    COST_BUS_AWREADY;
wire   [31:0] COST_BUS_AWADDR;
reg    COST_BUS_WVALID;
wire    COST_BUS_WREADY;
reg    COST_BUS_ARVALID;
wire    COST_BUS_ARREADY;
wire    COST_BUS_RVALID;
reg    COST_BUS_RREADY;
wire   [31:0] COST_BUS_RDATA;
wire    COST_BUS_RLAST;
wire   [0:0] COST_BUS_RID;
wire   [0:0] COST_BUS_RUSER;
wire   [1:0] COST_BUS_RRESP;
wire    COST_BUS_BVALID;
reg    COST_BUS_BREADY;
wire   [1:0] COST_BUS_BRESP;
wire   [0:0] COST_BUS_BID;
wire   [0:0] COST_BUS_BUSER;
wire  signed [32:0] tmp_1_cast_fu_355_p1;
reg  signed [32:0] tmp_1_cast_reg_783;
wire  signed [32:0] tmp_2_cast_fu_359_p1;
reg  signed [32:0] tmp_2_cast_reg_788;
wire  signed [32:0] tmp_3_cast_fu_363_p1;
reg  signed [32:0] tmp_3_cast_reg_793;
wire   [15:0] next_mul_fu_367_p2;
reg   [15:0] next_mul_reg_798;
wire    ap_CS_fsm_state2;
wire   [7:0] i_1_fu_379_p2;
reg   [7:0] i_1_reg_806;
wire   [8:0] j_cast_i_fu_389_p1;
reg   [8:0] j_cast_i_reg_811;
wire    ap_CS_fsm_state3;
wire   [7:0] j_1_fu_399_p2;
reg   [7:0] j_1_reg_820;
wire   [21:0] tmp_4_i9_fu_435_p2;
reg   [21:0] tmp_4_i9_reg_825;
wire   [0:0] exitcond2_i_fu_393_p2;
reg    ap_sig_ioackin_COST_BUS_AWREADY;
wire   [4:0] d_fu_465_p2;
reg   [4:0] d_reg_839;
wire    ap_CS_fsm_state5;
wire   [8:0] nj_fu_471_p2;
reg   [8:0] nj_reg_844;
wire   [0:0] exitcond_i_fu_459_p2;
wire   [8:0] li_cast_i_i_fu_476_p1;
reg   [8:0] li_cast_i_i_reg_849;
wire  signed [8:0] cli_fu_490_p2;
reg  signed [8:0] cli_reg_857;
reg    ap_sig_ioackin_COST_BUS_WREADY;
reg    ap_block_state6_io;
wire   [0:0] tmp_7_i_i_i_fu_499_p2;
reg   [0:0] tmp_7_i_i_i_reg_863;
wire   [16:0] tmp_9_i_i_fu_505_p2;
reg   [16:0] tmp_9_i_i_reg_868;
wire  signed [8:0] crj_fu_530_p2;
reg  signed [8:0] crj_reg_877;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_i_i_fu_515_p2;
wire   [0:0] tmp_8_i_i_i_8_fu_569_p2;
reg   [0:0] tmp_8_i_i_i_8_reg_883;
reg   [31:0] IMG_BUS_addr_1_reg_889;
reg   [31:0] IMG_BUS_addr_2_reg_895;
wire   [2:0] dj_fu_623_p2;
reg   [2:0] dj_reg_901;
wire   [2:0] di_fu_629_p2;
reg   [7:0] IMG_BUS_addr_1_read_reg_911;
reg   [7:0] IMG_BUS_addr_2_read_reg_916;
wire   [31:0] sum_2_fu_721_p3;
wire    ap_CS_fsm_state17;
wire   [15:0] next_mul1_fu_728_p2;
reg   [15:0] next_mul1_reg_926;
wire    ap_CS_fsm_state23;
wire   [7:0] i_fu_740_p2;
reg   [7:0] i_reg_934;
reg   [31:0] IMG_BUS_addr_reg_939;
wire   [0:0] exitcond1_fu_734_p2;
wire   [7:0] j_fu_771_p2;
reg   [7:0] j_reg_949;
reg    ap_block_state31;
reg   [7:0] IMG_BUS_addr_read_reg_954;
wire    grp_comp_disps_fu_347_ap_start;
wire    grp_comp_disps_fu_347_ap_done;
wire    grp_comp_disps_fu_347_ap_idle;
wire    grp_comp_disps_fu_347_ap_ready;
wire    grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWVALID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWADDR;
wire   [0:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLEN;
wire   [2:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWSIZE;
wire   [1:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWBURST;
wire   [1:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLOCK;
wire   [3:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWCACHE;
wire   [2:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWPROT;
wire   [3:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWQOS;
wire   [3:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWREGION;
wire   [0:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWUSER;
wire    grp_comp_disps_fu_347_m_axi_cost_in_m_img_WVALID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_WDATA;
wire   [3:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_WSTRB;
wire    grp_comp_disps_fu_347_m_axi_cost_in_m_img_WLAST;
wire   [0:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_WID;
wire   [0:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_WUSER;
wire    grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARVALID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARADDR;
wire   [0:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLEN;
wire   [2:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARSIZE;
wire   [1:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARBURST;
wire   [1:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLOCK;
wire   [3:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARCACHE;
wire   [2:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARPROT;
wire   [3:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARQOS;
wire   [3:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARREGION;
wire   [0:0] grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARUSER;
wire    grp_comp_disps_fu_347_m_axi_cost_in_m_img_RREADY;
wire    grp_comp_disps_fu_347_m_axi_cost_in_m_img_BREADY;
wire    grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWVALID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWADDR;
wire   [0:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLEN;
wire   [2:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWSIZE;
wire   [1:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWBURST;
wire   [1:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLOCK;
wire   [3:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWCACHE;
wire   [2:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWPROT;
wire   [3:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWQOS;
wire   [3:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWREGION;
wire   [0:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWUSER;
wire    grp_comp_disps_fu_347_m_axi_disp_out_m_img_WVALID;
wire   [7:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_WDATA;
wire   [0:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_WSTRB;
wire    grp_comp_disps_fu_347_m_axi_disp_out_m_img_WLAST;
wire   [0:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_WID;
wire   [0:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_WUSER;
wire    grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARVALID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARADDR;
wire   [0:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARID;
wire   [31:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLEN;
wire   [2:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARSIZE;
wire   [1:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARBURST;
wire   [1:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLOCK;
wire   [3:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARCACHE;
wire   [2:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARPROT;
wire   [3:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARQOS;
wire   [3:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARREGION;
wire   [0:0] grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARUSER;
wire    grp_comp_disps_fu_347_m_axi_disp_out_m_img_RREADY;
wire    grp_comp_disps_fu_347_m_axi_disp_out_m_img_BREADY;
reg   [7:0] ni_reg_220;
reg   [15:0] phi_mul_reg_232;
reg   [7:0] j_i_reg_244;
wire   [0:0] exitcond3_i_fu_373_p2;
reg   [4:0] cj_reg_255;
reg   [31:0] sum_i_i_reg_266;
reg  signed [2:0] di_i_i_reg_279;
reg   [31:0] sum_1_i_i_reg_291;
reg  signed [2:0] dj_i_i_reg_303;
reg   [7:0] i_assign_reg_314;
wire    ap_CS_fsm_state22;
reg   [15:0] phi_mul1_reg_325;
reg   [7:0] j_assign_reg_336;
reg    ap_sig_ioackin_IMG_BUS_WREADY;
reg    ap_sig_ioackin_IMG_BUS_AWREADY;
reg    grp_comp_disps_fu_347_ap_start_reg;
wire   [63:0] tmp_7_fu_444_p1;
wire  signed [63:0] left_m_img_sum_cast_fu_589_p1;
wire  signed [63:0] right_m_img_sum_cast_fu_613_p1;
wire  signed [63:0] tmp_5_fu_755_p1;
reg    ap_reg_ioackin_COST_BUS_AWREADY;
reg    ap_reg_ioackin_COST_BUS_WREADY;
reg    ap_reg_ioackin_IMG_BUS_ARREADY;
reg    ap_sig_ioackin_IMG_BUS_ARREADY;
reg    ap_reg_ioackin_IMG_BUS_AWREADY;
reg    ap_reg_ioackin_IMG_BUS_WREADY;
wire   [7:0] tmp_8_fu_777_p2;
wire   [15:0] j_cast5_i_fu_385_p1;
wire   [15:0] ci_fu_405_p2;
wire   [20:0] p_shl_i_fu_411_p3;
wire   [16:0] p_shl1_i_fu_423_p3;
wire   [21:0] p_shl_cast_i_fu_419_p1;
wire   [21:0] p_shl1_cast_i_fu_431_p1;
wire  signed [31:0] tmp_6_fu_441_p1;
wire   [8:0] cj_cast1_i_fu_455_p1;
wire  signed [8:0] di_cast_i_i_fu_480_p1;
wire  signed [8:0] tmp_9_i_i_fu_505_p0;
wire  signed [8:0] dj_cast_i_i_fu_511_p1;
wire  signed [8:0] clj_fu_521_p2;
wire   [8:0] tmp_i_i_i_fu_539_p2;
wire   [0:0] tmp_9_fu_544_p3;
wire   [0:0] tmp_8_i_i_i_fu_558_p2;
wire   [0:0] tmp_i_i_fu_564_p2;
wire   [0:0] rev_fu_552_p2;
wire  signed [16:0] clj_cast6_i_i_fu_526_p1;
wire   [16:0] tmp_i_i_9_fu_575_p2;
wire  signed [32:0] tmp_1_i_i_cast_fu_580_p1;
wire   [32:0] left_m_img_sum_fu_584_p2;
wire  signed [16:0] crj_cast5_i_i_fu_535_p1;
wire   [16:0] tmp_3_i_i_fu_599_p2;
wire  signed [32:0] tmp_4_i_i_cast_fu_604_p1;
wire   [32:0] right_m_img_sum_fu_608_p2;
wire   [8:0] tmp_i1_i_i_fu_635_p2;
wire   [0:0] tmp_10_fu_639_p3;
wire   [8:0] l_cast_i_i_fu_658_p1;
wire   [8:0] r_cast_i_i_fu_661_p1;
wire   [8:0] a_assign_i_i_fu_664_p2;
wire   [0:0] tmp_11_fu_670_p3;
wire   [8:0] tmp_i8_i_i_fu_678_p2;
wire   [8:0] a_assign_1_i_i_fu_684_p3;
wire  signed [31:0] a_assign_1_cast_i_i_fu_692_p1;
wire   [0:0] tmp_8_i5_i_i_fu_653_p2;
wire   [0:0] tmp4_i_i_fu_702_p2;
wire   [0:0] rev1_fu_647_p2;
wire   [0:0] sel_tmp_i_i_fu_707_p2;
wire   [31:0] sum_fu_696_p2;
wire   [31:0] sum_1_fu_713_p3;
wire   [32:0] tmp_fu_746_p1;
wire   [32:0] tmp_4_fu_750_p2;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 grp_comp_disps_fu_347_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_COST_BUS_AWREADY = 1'b0;
#0 ap_reg_ioackin_COST_BUS_WREADY = 1'b0;
#0 ap_reg_ioackin_IMG_BUS_ARREADY = 1'b0;
#0 ap_reg_ioackin_IMG_BUS_AWREADY = 1'b0;
#0 ap_reg_ioackin_IMG_BUS_WREADY = 1'b0;
end

comp_d_map_IMG_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_IMG_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_IMG_BUS_DATA_WIDTH ))
comp_d_map_IMG_BUS_s_axi_U(
    .AWVALID(s_axi_IMG_BUS_AWVALID),
    .AWREADY(s_axi_IMG_BUS_AWREADY),
    .AWADDR(s_axi_IMG_BUS_AWADDR),
    .WVALID(s_axi_IMG_BUS_WVALID),
    .WREADY(s_axi_IMG_BUS_WREADY),
    .WDATA(s_axi_IMG_BUS_WDATA),
    .WSTRB(s_axi_IMG_BUS_WSTRB),
    .ARVALID(s_axi_IMG_BUS_ARVALID),
    .ARREADY(s_axi_IMG_BUS_ARREADY),
    .ARADDR(s_axi_IMG_BUS_ARADDR),
    .RVALID(s_axi_IMG_BUS_RVALID),
    .RREADY(s_axi_IMG_BUS_RREADY),
    .RDATA(s_axi_IMG_BUS_RDATA),
    .RRESP(s_axi_IMG_BUS_RRESP),
    .BVALID(s_axi_IMG_BUS_BVALID),
    .BREADY(s_axi_IMG_BUS_BREADY),
    .BRESP(s_axi_IMG_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .img_left(img_left),
    .img_right(img_right),
    .disp_out(disp_out),
    .img_cost(img_cost)
);

comp_d_map_IMG_BUS_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMG_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMG_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMG_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMG_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMG_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMG_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMG_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMG_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMG_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMG_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMG_BUS_CACHE_VALUE ))
comp_d_map_IMG_BUS_m_axi_U(
    .AWVALID(m_axi_IMG_BUS_AWVALID),
    .AWREADY(m_axi_IMG_BUS_AWREADY),
    .AWADDR(m_axi_IMG_BUS_AWADDR),
    .AWID(m_axi_IMG_BUS_AWID),
    .AWLEN(m_axi_IMG_BUS_AWLEN),
    .AWSIZE(m_axi_IMG_BUS_AWSIZE),
    .AWBURST(m_axi_IMG_BUS_AWBURST),
    .AWLOCK(m_axi_IMG_BUS_AWLOCK),
    .AWCACHE(m_axi_IMG_BUS_AWCACHE),
    .AWPROT(m_axi_IMG_BUS_AWPROT),
    .AWQOS(m_axi_IMG_BUS_AWQOS),
    .AWREGION(m_axi_IMG_BUS_AWREGION),
    .AWUSER(m_axi_IMG_BUS_AWUSER),
    .WVALID(m_axi_IMG_BUS_WVALID),
    .WREADY(m_axi_IMG_BUS_WREADY),
    .WDATA(m_axi_IMG_BUS_WDATA),
    .WSTRB(m_axi_IMG_BUS_WSTRB),
    .WLAST(m_axi_IMG_BUS_WLAST),
    .WID(m_axi_IMG_BUS_WID),
    .WUSER(m_axi_IMG_BUS_WUSER),
    .ARVALID(m_axi_IMG_BUS_ARVALID),
    .ARREADY(m_axi_IMG_BUS_ARREADY),
    .ARADDR(m_axi_IMG_BUS_ARADDR),
    .ARID(m_axi_IMG_BUS_ARID),
    .ARLEN(m_axi_IMG_BUS_ARLEN),
    .ARSIZE(m_axi_IMG_BUS_ARSIZE),
    .ARBURST(m_axi_IMG_BUS_ARBURST),
    .ARLOCK(m_axi_IMG_BUS_ARLOCK),
    .ARCACHE(m_axi_IMG_BUS_ARCACHE),
    .ARPROT(m_axi_IMG_BUS_ARPROT),
    .ARQOS(m_axi_IMG_BUS_ARQOS),
    .ARREGION(m_axi_IMG_BUS_ARREGION),
    .ARUSER(m_axi_IMG_BUS_ARUSER),
    .RVALID(m_axi_IMG_BUS_RVALID),
    .RREADY(m_axi_IMG_BUS_RREADY),
    .RDATA(m_axi_IMG_BUS_RDATA),
    .RLAST(m_axi_IMG_BUS_RLAST),
    .RID(m_axi_IMG_BUS_RID),
    .RUSER(m_axi_IMG_BUS_RUSER),
    .RRESP(m_axi_IMG_BUS_RRESP),
    .BVALID(m_axi_IMG_BUS_BVALID),
    .BREADY(m_axi_IMG_BUS_BREADY),
    .BRESP(m_axi_IMG_BUS_BRESP),
    .BID(m_axi_IMG_BUS_BID),
    .BUSER(m_axi_IMG_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IMG_BUS_ARVALID),
    .I_ARREADY(IMG_BUS_ARREADY),
    .I_ARADDR(IMG_BUS_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(IMG_BUS_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMG_BUS_RVALID),
    .I_RREADY(IMG_BUS_RREADY),
    .I_RDATA(IMG_BUS_RDATA),
    .I_RID(IMG_BUS_RID),
    .I_RUSER(IMG_BUS_RUSER),
    .I_RRESP(IMG_BUS_RRESP),
    .I_RLAST(IMG_BUS_RLAST),
    .I_AWVALID(IMG_BUS_AWVALID),
    .I_AWREADY(IMG_BUS_AWREADY),
    .I_AWADDR(IMG_BUS_AWADDR),
    .I_AWID(IMG_BUS_AWID),
    .I_AWLEN(IMG_BUS_AWLEN),
    .I_AWSIZE(IMG_BUS_AWSIZE),
    .I_AWLOCK(IMG_BUS_AWLOCK),
    .I_AWCACHE(IMG_BUS_AWCACHE),
    .I_AWQOS(IMG_BUS_AWQOS),
    .I_AWPROT(IMG_BUS_AWPROT),
    .I_AWUSER(IMG_BUS_AWUSER),
    .I_AWBURST(IMG_BUS_AWBURST),
    .I_AWREGION(IMG_BUS_AWREGION),
    .I_WVALID(IMG_BUS_WVALID),
    .I_WREADY(IMG_BUS_WREADY),
    .I_WDATA(IMG_BUS_WDATA),
    .I_WID(IMG_BUS_WID),
    .I_WUSER(IMG_BUS_WUSER),
    .I_WLAST(IMG_BUS_WLAST),
    .I_WSTRB(IMG_BUS_WSTRB),
    .I_BVALID(IMG_BUS_BVALID),
    .I_BREADY(IMG_BUS_BREADY),
    .I_BRESP(IMG_BUS_BRESP),
    .I_BID(IMG_BUS_BID),
    .I_BUSER(IMG_BUS_BUSER)
);

comp_d_map_COST_BUS_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_COST_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_COST_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_COST_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_COST_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_COST_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_COST_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_COST_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_COST_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_COST_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_COST_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_COST_BUS_CACHE_VALUE ))
comp_d_map_COST_BUS_m_axi_U(
    .AWVALID(m_axi_COST_BUS_AWVALID),
    .AWREADY(m_axi_COST_BUS_AWREADY),
    .AWADDR(m_axi_COST_BUS_AWADDR),
    .AWID(m_axi_COST_BUS_AWID),
    .AWLEN(m_axi_COST_BUS_AWLEN),
    .AWSIZE(m_axi_COST_BUS_AWSIZE),
    .AWBURST(m_axi_COST_BUS_AWBURST),
    .AWLOCK(m_axi_COST_BUS_AWLOCK),
    .AWCACHE(m_axi_COST_BUS_AWCACHE),
    .AWPROT(m_axi_COST_BUS_AWPROT),
    .AWQOS(m_axi_COST_BUS_AWQOS),
    .AWREGION(m_axi_COST_BUS_AWREGION),
    .AWUSER(m_axi_COST_BUS_AWUSER),
    .WVALID(m_axi_COST_BUS_WVALID),
    .WREADY(m_axi_COST_BUS_WREADY),
    .WDATA(m_axi_COST_BUS_WDATA),
    .WSTRB(m_axi_COST_BUS_WSTRB),
    .WLAST(m_axi_COST_BUS_WLAST),
    .WID(m_axi_COST_BUS_WID),
    .WUSER(m_axi_COST_BUS_WUSER),
    .ARVALID(m_axi_COST_BUS_ARVALID),
    .ARREADY(m_axi_COST_BUS_ARREADY),
    .ARADDR(m_axi_COST_BUS_ARADDR),
    .ARID(m_axi_COST_BUS_ARID),
    .ARLEN(m_axi_COST_BUS_ARLEN),
    .ARSIZE(m_axi_COST_BUS_ARSIZE),
    .ARBURST(m_axi_COST_BUS_ARBURST),
    .ARLOCK(m_axi_COST_BUS_ARLOCK),
    .ARCACHE(m_axi_COST_BUS_ARCACHE),
    .ARPROT(m_axi_COST_BUS_ARPROT),
    .ARQOS(m_axi_COST_BUS_ARQOS),
    .ARREGION(m_axi_COST_BUS_ARREGION),
    .ARUSER(m_axi_COST_BUS_ARUSER),
    .RVALID(m_axi_COST_BUS_RVALID),
    .RREADY(m_axi_COST_BUS_RREADY),
    .RDATA(m_axi_COST_BUS_RDATA),
    .RLAST(m_axi_COST_BUS_RLAST),
    .RID(m_axi_COST_BUS_RID),
    .RUSER(m_axi_COST_BUS_RUSER),
    .RRESP(m_axi_COST_BUS_RRESP),
    .BVALID(m_axi_COST_BUS_BVALID),
    .BREADY(m_axi_COST_BUS_BREADY),
    .BRESP(m_axi_COST_BUS_BRESP),
    .BID(m_axi_COST_BUS_BID),
    .BUSER(m_axi_COST_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(COST_BUS_ARVALID),
    .I_ARREADY(COST_BUS_ARREADY),
    .I_ARADDR(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARADDR),
    .I_ARID(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARID),
    .I_ARLEN(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLEN),
    .I_ARSIZE(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARSIZE),
    .I_ARLOCK(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLOCK),
    .I_ARCACHE(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARCACHE),
    .I_ARQOS(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARQOS),
    .I_ARPROT(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARPROT),
    .I_ARUSER(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARUSER),
    .I_ARBURST(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARBURST),
    .I_ARREGION(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARREGION),
    .I_RVALID(COST_BUS_RVALID),
    .I_RREADY(COST_BUS_RREADY),
    .I_RDATA(COST_BUS_RDATA),
    .I_RID(COST_BUS_RID),
    .I_RUSER(COST_BUS_RUSER),
    .I_RRESP(COST_BUS_RRESP),
    .I_RLAST(COST_BUS_RLAST),
    .I_AWVALID(COST_BUS_AWVALID),
    .I_AWREADY(COST_BUS_AWREADY),
    .I_AWADDR(COST_BUS_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd30),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(COST_BUS_WVALID),
    .I_WREADY(COST_BUS_WREADY),
    .I_WDATA(sum_i_i_reg_266),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(COST_BUS_BVALID),
    .I_BREADY(COST_BUS_BREADY),
    .I_BRESP(COST_BUS_BRESP),
    .I_BID(COST_BUS_BID),
    .I_BUSER(COST_BUS_BUSER)
);

comp_disps grp_comp_disps_fu_347(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_comp_disps_fu_347_ap_start),
    .ap_done(grp_comp_disps_fu_347_ap_done),
    .ap_idle(grp_comp_disps_fu_347_ap_idle),
    .ap_ready(grp_comp_disps_fu_347_ap_ready),
    .m_axi_cost_in_m_img_AWVALID(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWVALID),
    .m_axi_cost_in_m_img_AWREADY(1'b0),
    .m_axi_cost_in_m_img_AWADDR(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWADDR),
    .m_axi_cost_in_m_img_AWID(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWID),
    .m_axi_cost_in_m_img_AWLEN(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLEN),
    .m_axi_cost_in_m_img_AWSIZE(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWSIZE),
    .m_axi_cost_in_m_img_AWBURST(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWBURST),
    .m_axi_cost_in_m_img_AWLOCK(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWLOCK),
    .m_axi_cost_in_m_img_AWCACHE(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWCACHE),
    .m_axi_cost_in_m_img_AWPROT(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWPROT),
    .m_axi_cost_in_m_img_AWQOS(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWQOS),
    .m_axi_cost_in_m_img_AWREGION(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWREGION),
    .m_axi_cost_in_m_img_AWUSER(grp_comp_disps_fu_347_m_axi_cost_in_m_img_AWUSER),
    .m_axi_cost_in_m_img_WVALID(grp_comp_disps_fu_347_m_axi_cost_in_m_img_WVALID),
    .m_axi_cost_in_m_img_WREADY(1'b0),
    .m_axi_cost_in_m_img_WDATA(grp_comp_disps_fu_347_m_axi_cost_in_m_img_WDATA),
    .m_axi_cost_in_m_img_WSTRB(grp_comp_disps_fu_347_m_axi_cost_in_m_img_WSTRB),
    .m_axi_cost_in_m_img_WLAST(grp_comp_disps_fu_347_m_axi_cost_in_m_img_WLAST),
    .m_axi_cost_in_m_img_WID(grp_comp_disps_fu_347_m_axi_cost_in_m_img_WID),
    .m_axi_cost_in_m_img_WUSER(grp_comp_disps_fu_347_m_axi_cost_in_m_img_WUSER),
    .m_axi_cost_in_m_img_ARVALID(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARVALID),
    .m_axi_cost_in_m_img_ARREADY(COST_BUS_ARREADY),
    .m_axi_cost_in_m_img_ARADDR(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARADDR),
    .m_axi_cost_in_m_img_ARID(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARID),
    .m_axi_cost_in_m_img_ARLEN(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLEN),
    .m_axi_cost_in_m_img_ARSIZE(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARSIZE),
    .m_axi_cost_in_m_img_ARBURST(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARBURST),
    .m_axi_cost_in_m_img_ARLOCK(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARLOCK),
    .m_axi_cost_in_m_img_ARCACHE(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARCACHE),
    .m_axi_cost_in_m_img_ARPROT(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARPROT),
    .m_axi_cost_in_m_img_ARQOS(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARQOS),
    .m_axi_cost_in_m_img_ARREGION(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARREGION),
    .m_axi_cost_in_m_img_ARUSER(grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARUSER),
    .m_axi_cost_in_m_img_RVALID(COST_BUS_RVALID),
    .m_axi_cost_in_m_img_RREADY(grp_comp_disps_fu_347_m_axi_cost_in_m_img_RREADY),
    .m_axi_cost_in_m_img_RDATA(COST_BUS_RDATA),
    .m_axi_cost_in_m_img_RLAST(COST_BUS_RLAST),
    .m_axi_cost_in_m_img_RID(COST_BUS_RID),
    .m_axi_cost_in_m_img_RUSER(COST_BUS_RUSER),
    .m_axi_cost_in_m_img_RRESP(COST_BUS_RRESP),
    .m_axi_cost_in_m_img_BVALID(1'b0),
    .m_axi_cost_in_m_img_BREADY(grp_comp_disps_fu_347_m_axi_cost_in_m_img_BREADY),
    .m_axi_cost_in_m_img_BRESP(2'd0),
    .m_axi_cost_in_m_img_BID(1'd0),
    .m_axi_cost_in_m_img_BUSER(1'd0),
    .m_axi_disp_out_m_img_AWVALID(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWVALID),
    .m_axi_disp_out_m_img_AWREADY(IMG_BUS_AWREADY),
    .m_axi_disp_out_m_img_AWADDR(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWADDR),
    .m_axi_disp_out_m_img_AWID(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWID),
    .m_axi_disp_out_m_img_AWLEN(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLEN),
    .m_axi_disp_out_m_img_AWSIZE(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWSIZE),
    .m_axi_disp_out_m_img_AWBURST(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWBURST),
    .m_axi_disp_out_m_img_AWLOCK(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLOCK),
    .m_axi_disp_out_m_img_AWCACHE(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWCACHE),
    .m_axi_disp_out_m_img_AWPROT(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWPROT),
    .m_axi_disp_out_m_img_AWQOS(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWQOS),
    .m_axi_disp_out_m_img_AWREGION(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWREGION),
    .m_axi_disp_out_m_img_AWUSER(grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWUSER),
    .m_axi_disp_out_m_img_WVALID(grp_comp_disps_fu_347_m_axi_disp_out_m_img_WVALID),
    .m_axi_disp_out_m_img_WREADY(IMG_BUS_WREADY),
    .m_axi_disp_out_m_img_WDATA(grp_comp_disps_fu_347_m_axi_disp_out_m_img_WDATA),
    .m_axi_disp_out_m_img_WSTRB(grp_comp_disps_fu_347_m_axi_disp_out_m_img_WSTRB),
    .m_axi_disp_out_m_img_WLAST(grp_comp_disps_fu_347_m_axi_disp_out_m_img_WLAST),
    .m_axi_disp_out_m_img_WID(grp_comp_disps_fu_347_m_axi_disp_out_m_img_WID),
    .m_axi_disp_out_m_img_WUSER(grp_comp_disps_fu_347_m_axi_disp_out_m_img_WUSER),
    .m_axi_disp_out_m_img_ARVALID(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARVALID),
    .m_axi_disp_out_m_img_ARREADY(1'b0),
    .m_axi_disp_out_m_img_ARADDR(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARADDR),
    .m_axi_disp_out_m_img_ARID(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARID),
    .m_axi_disp_out_m_img_ARLEN(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLEN),
    .m_axi_disp_out_m_img_ARSIZE(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARSIZE),
    .m_axi_disp_out_m_img_ARBURST(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARBURST),
    .m_axi_disp_out_m_img_ARLOCK(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARLOCK),
    .m_axi_disp_out_m_img_ARCACHE(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARCACHE),
    .m_axi_disp_out_m_img_ARPROT(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARPROT),
    .m_axi_disp_out_m_img_ARQOS(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARQOS),
    .m_axi_disp_out_m_img_ARREGION(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARREGION),
    .m_axi_disp_out_m_img_ARUSER(grp_comp_disps_fu_347_m_axi_disp_out_m_img_ARUSER),
    .m_axi_disp_out_m_img_RVALID(1'b0),
    .m_axi_disp_out_m_img_RREADY(grp_comp_disps_fu_347_m_axi_disp_out_m_img_RREADY),
    .m_axi_disp_out_m_img_RDATA(8'd0),
    .m_axi_disp_out_m_img_RLAST(1'b0),
    .m_axi_disp_out_m_img_RID(1'd0),
    .m_axi_disp_out_m_img_RUSER(1'd0),
    .m_axi_disp_out_m_img_RRESP(2'd0),
    .m_axi_disp_out_m_img_BVALID(IMG_BUS_BVALID),
    .m_axi_disp_out_m_img_BREADY(grp_comp_disps_fu_347_m_axi_disp_out_m_img_BREADY),
    .m_axi_disp_out_m_img_BRESP(IMG_BUS_BRESP),
    .m_axi_disp_out_m_img_BID(IMG_BUS_BID),
    .m_axi_disp_out_m_img_BUSER(IMG_BUS_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_COST_BUS_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_COST_BUS_AWREADY == 1'b1)) begin
                ap_reg_ioackin_COST_BUS_AWREADY <= 1'b0;
            end else if ((1'b1 == COST_BUS_AWREADY)) begin
                ap_reg_ioackin_COST_BUS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_COST_BUS_WREADY <= 1'b0;
    end else begin
        if (((exitcond1_i_i_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            if ((1'b0 == ap_block_state6_io)) begin
                ap_reg_ioackin_COST_BUS_WREADY <= 1'b0;
            end else if ((1'b1 == COST_BUS_WREADY)) begin
                ap_reg_ioackin_COST_BUS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMG_BUS_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_IMG_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_sig_ioackin_IMG_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_sig_ioackin_IMG_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_IMG_BUS_ARREADY <= 1'b0;
        end else if ((((1'b1 == IMG_BUS_ARREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == IMG_BUS_ARREADY) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == IMG_BUS_ARREADY) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_IMG_BUS_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMG_BUS_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            if ((ap_sig_ioackin_IMG_BUS_AWREADY == 1'b1)) begin
                ap_reg_ioackin_IMG_BUS_AWREADY <= 1'b0;
            end else if ((1'b1 == IMG_BUS_AWREADY)) begin
                ap_reg_ioackin_IMG_BUS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMG_BUS_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            if ((ap_sig_ioackin_IMG_BUS_WREADY == 1'b1)) begin
                ap_reg_ioackin_IMG_BUS_WREADY <= 1'b0;
            end else if ((1'b1 == IMG_BUS_WREADY)) begin
                ap_reg_ioackin_IMG_BUS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_comp_disps_fu_347_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_comp_disps_fu_347_ap_start_reg <= 1'b1;
        end else if ((grp_comp_disps_fu_347_ap_ready == 1'b1)) begin
            grp_comp_disps_fu_347_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_COST_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        cj_reg_255 <= 5'd0;
    end else if (((1'b0 == ap_block_state6_io) & (exitcond1_i_i_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        cj_reg_255 <= d_reg_839;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        di_i_i_reg_279 <= di_fu_629_p2;
    end else if (((exitcond_i_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        di_i_i_reg_279 <= 3'd6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond1_i_i_fu_484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        dj_i_i_reg_303 <= 3'd6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dj_i_i_reg_303 <= dj_reg_901;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == IMG_BUS_BVALID) & (1'b1 == ap_CS_fsm_state36))) begin
        i_assign_reg_314 <= i_reg_934;
    end else if (((grp_comp_disps_fu_347_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        i_assign_reg_314 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_IMG_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        j_assign_reg_336 <= 8'd0;
    end else if (((ap_sig_ioackin_IMG_BUS_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        j_assign_reg_336 <= j_reg_949;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_244 <= 8'd0;
    end else if (((1'b1 == COST_BUS_BVALID) & (1'b1 == ap_CS_fsm_state21))) begin
        j_i_reg_244 <= j_1_reg_820;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ni_reg_220 <= i_1_reg_806;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ni_reg_220 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == IMG_BUS_BVALID) & (1'b1 == ap_CS_fsm_state36))) begin
        phi_mul1_reg_325 <= next_mul1_reg_926;
    end else if (((grp_comp_disps_fu_347_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        phi_mul1_reg_325 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_232 <= next_mul_reg_798;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_232 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond1_i_i_fu_484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_1_i_i_reg_291 <= sum_i_i_reg_266;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_1_i_i_reg_291 <= sum_2_fu_721_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_i_i_reg_266 <= sum_1_i_i_reg_291;
    end else if (((exitcond_i_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_i_i_reg_266 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == IMG_BUS_RVALID) & (1'b1 == ap_CS_fsm_state15))) begin
        IMG_BUS_addr_1_read_reg_911 <= IMG_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_515_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        IMG_BUS_addr_1_reg_889 <= left_m_img_sum_cast_fu_589_p1;
        IMG_BUS_addr_2_reg_895 <= right_m_img_sum_cast_fu_613_p1;
        crj_reg_877 <= crj_fu_530_p2;
        dj_reg_901 <= dj_fu_623_p2;
        tmp_8_i_i_i_8_reg_883 <= tmp_8_i_i_i_8_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == IMG_BUS_RVALID) & (1'b1 == ap_CS_fsm_state16))) begin
        IMG_BUS_addr_2_read_reg_916 <= IMG_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == IMG_BUS_RVALID) & (exitcond_fu_765_p2 == 1'd0)) & (exitcond_fu_765_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        IMG_BUS_addr_read_reg_954 <= IMG_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        IMG_BUS_addr_reg_939 <= tmp_5_fu_755_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond1_i_i_fu_484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        cli_reg_857 <= cli_fu_490_p2;
        tmp_7_i_i_i_reg_863 <= tmp_7_i_i_i_fu_499_p2;
        tmp_9_i_i_reg_868 <= tmp_9_i_i_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_reg_839 <= d_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_806 <= i_1_fu_379_p2;
        next_mul_reg_798 <= next_mul_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_reg_934 <= i_fu_740_p2;
        next_mul1_reg_926 <= next_mul1_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_820 <= j_1_fu_399_p2;
        j_cast_i_reg_811[7 : 0] <= j_cast_i_fu_389_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == IMG_BUS_RVALID) & (exitcond_fu_765_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31))) begin
        j_reg_949 <= j_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        li_cast_i_i_reg_849[7 : 0] <= li_cast_i_i_fu_476_p1[7 : 0];
        nj_reg_844 <= nj_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_cast_reg_783 <= tmp_1_cast_fu_355_p1;
        tmp_2_cast_reg_788 <= tmp_2_cast_fu_359_p1;
        tmp_3_cast_reg_793 <= tmp_3_cast_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_4_i9_reg_825[21 : 1] <= tmp_4_i9_fu_435_p2[21 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        COST_BUS_ARVALID = grp_comp_disps_fu_347_m_axi_cost_in_m_img_ARVALID;
    end else begin
        COST_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_COST_BUS_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        COST_BUS_AWVALID = 1'b1;
    end else begin
        COST_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == COST_BUS_BVALID) & (1'b1 == ap_CS_fsm_state21))) begin
        COST_BUS_BREADY = 1'b1;
    end else begin
        COST_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        COST_BUS_RREADY = grp_comp_disps_fu_347_m_axi_cost_in_m_img_RREADY;
    end else begin
        COST_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_COST_BUS_WREADY == 1'b0) & (exitcond1_i_i_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        COST_BUS_WVALID = 1'b1;
    end else begin
        COST_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        COST_BUS_blk_n_AW = m_axi_COST_BUS_AWREADY;
    end else begin
        COST_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        COST_BUS_blk_n_B = m_axi_COST_BUS_BVALID;
    end else begin
        COST_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        COST_BUS_blk_n_W = m_axi_COST_BUS_WREADY;
    end else begin
        COST_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            IMG_BUS_ARADDR = IMG_BUS_addr_reg_939;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            IMG_BUS_ARADDR = IMG_BUS_addr_2_reg_895;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            IMG_BUS_ARADDR = IMG_BUS_addr_1_reg_889;
        end else begin
            IMG_BUS_ARADDR = 'bx;
        end
    end else begin
        IMG_BUS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24))) begin
        IMG_BUS_ARLEN = 32'd225;
    end else if ((((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        IMG_BUS_ARLEN = 32'd1;
    end else begin
        IMG_BUS_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        IMG_BUS_ARVALID = 1'b1;
    end else begin
        IMG_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMG_BUS_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30))) begin
        IMG_BUS_AWADDR = IMG_BUS_addr_reg_939;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWADDR = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWADDR;
    end else begin
        IMG_BUS_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWBURST = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWBURST;
    end else begin
        IMG_BUS_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWCACHE = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWCACHE;
    end else begin
        IMG_BUS_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWID = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWID;
    end else begin
        IMG_BUS_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMG_BUS_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30))) begin
        IMG_BUS_AWLEN = 32'd225;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWLEN = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLEN;
    end else begin
        IMG_BUS_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWLOCK = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWLOCK;
    end else begin
        IMG_BUS_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWPROT = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWPROT;
    end else begin
        IMG_BUS_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWQOS = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWQOS;
    end else begin
        IMG_BUS_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWREGION = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWREGION;
    end else begin
        IMG_BUS_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWSIZE = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWSIZE;
    end else begin
        IMG_BUS_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWUSER = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWUSER;
    end else begin
        IMG_BUS_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMG_BUS_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30))) begin
        IMG_BUS_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_AWVALID = grp_comp_disps_fu_347_m_axi_disp_out_m_img_AWVALID;
    end else begin
        IMG_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == IMG_BUS_BVALID) & (1'b1 == ap_CS_fsm_state36))) begin
        IMG_BUS_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_BREADY = grp_comp_disps_fu_347_m_axi_disp_out_m_img_BREADY;
    end else begin
        IMG_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == IMG_BUS_RVALID) & (exitcond_fu_765_p2 == 1'd0)) & (exitcond_fu_765_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == IMG_BUS_RVALID) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == IMG_BUS_RVALID) & (1'b1 == ap_CS_fsm_state15)))) begin
        IMG_BUS_RREADY = 1'b1;
    end else begin
        IMG_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMG_BUS_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        IMG_BUS_WDATA = tmp_8_fu_777_p2;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_WDATA = grp_comp_disps_fu_347_m_axi_disp_out_m_img_WDATA;
    end else begin
        IMG_BUS_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_WID = grp_comp_disps_fu_347_m_axi_disp_out_m_img_WID;
    end else begin
        IMG_BUS_WID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_WLAST = grp_comp_disps_fu_347_m_axi_disp_out_m_img_WLAST;
    end else begin
        IMG_BUS_WLAST = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMG_BUS_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        IMG_BUS_WSTRB = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_WSTRB = grp_comp_disps_fu_347_m_axi_disp_out_m_img_WSTRB;
    end else begin
        IMG_BUS_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_WUSER = grp_comp_disps_fu_347_m_axi_disp_out_m_img_WUSER;
    end else begin
        IMG_BUS_WUSER = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMG_BUS_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        IMG_BUS_WVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((exitcond3_i_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        IMG_BUS_WVALID = grp_comp_disps_fu_347_m_axi_disp_out_m_img_WVALID;
    end else begin
        IMG_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        IMG_BUS_blk_n_AR = m_axi_IMG_BUS_ARREADY;
    end else begin
        IMG_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        IMG_BUS_blk_n_AW = m_axi_IMG_BUS_AWREADY;
    end else begin
        IMG_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        IMG_BUS_blk_n_B = m_axi_IMG_BUS_BVALID;
    end else begin
        IMG_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | ((exitcond_fu_765_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31)))) begin
        IMG_BUS_blk_n_R = m_axi_IMG_BUS_RVALID;
    end else begin
        IMG_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        IMG_BUS_blk_n_W = m_axi_IMG_BUS_WREADY;
    end else begin
        IMG_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_COST_BUS_AWREADY == 1'b0)) begin
        ap_sig_ioackin_COST_BUS_AWREADY = COST_BUS_AWREADY;
    end else begin
        ap_sig_ioackin_COST_BUS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_COST_BUS_WREADY == 1'b0)) begin
        ap_sig_ioackin_COST_BUS_WREADY = COST_BUS_WREADY;
    end else begin
        ap_sig_ioackin_COST_BUS_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMG_BUS_ARREADY == 1'b0)) begin
        ap_sig_ioackin_IMG_BUS_ARREADY = IMG_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_IMG_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMG_BUS_AWREADY == 1'b0)) begin
        ap_sig_ioackin_IMG_BUS_AWREADY = IMG_BUS_AWREADY;
    end else begin
        ap_sig_ioackin_IMG_BUS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMG_BUS_WREADY == 1'b0)) begin
        ap_sig_ioackin_IMG_BUS_WREADY = IMG_BUS_WREADY;
    end else begin
        ap_sig_ioackin_IMG_BUS_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_i_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_i_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_COST_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_i_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (exitcond1_i_i_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b0 == ap_block_state6_io) & (exitcond1_i_i_fu_484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_i_i_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_IMG_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_IMG_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == IMG_BUS_RVALID) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == IMG_BUS_RVALID) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == COST_BUS_BVALID) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((grp_comp_disps_fu_347_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((exitcond1_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_IMG_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((ap_sig_ioackin_IMG_BUS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if ((~((1'b0 == IMG_BUS_RVALID) & (exitcond_fu_765_p2 == 1'd0)) & (exitcond_fu_765_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if ((~((1'b0 == IMG_BUS_RVALID) & (exitcond_fu_765_p2 == 1'd0)) & (exitcond_fu_765_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((ap_sig_ioackin_IMG_BUS_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == IMG_BUS_BVALID) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign COST_BUS_AWADDR = tmp_7_fu_444_p1;

assign a_assign_1_cast_i_i_fu_692_p1 = $signed(a_assign_1_i_i_fu_684_p3);

assign a_assign_1_i_i_fu_684_p3 = ((tmp_11_fu_670_p3[0:0] === 1'b1) ? tmp_i8_i_i_fu_678_p2 : a_assign_i_i_fu_664_p2);

assign a_assign_i_i_fu_664_p2 = (l_cast_i_i_fu_658_p1 - r_cast_i_i_fu_661_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state31 = ((1'b0 == IMG_BUS_RVALID) & (exitcond_fu_765_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state6_io = ((ap_sig_ioackin_COST_BUS_WREADY == 1'b0) & (exitcond1_i_i_fu_484_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ci_fu_405_p2 = (phi_mul_reg_232 + j_cast5_i_fu_385_p1);

assign cj_cast1_i_fu_455_p1 = cj_reg_255;

assign cli_fu_490_p2 = ($signed(di_cast_i_i_fu_480_p1) + $signed(li_cast_i_i_reg_849));

assign clj_cast6_i_i_fu_526_p1 = clj_fu_521_p2;

assign clj_fu_521_p2 = ($signed(j_cast_i_reg_811) + $signed(dj_cast_i_i_fu_511_p1));

assign crj_cast5_i_i_fu_535_p1 = crj_fu_530_p2;

assign crj_fu_530_p2 = ($signed(nj_reg_844) + $signed(dj_cast_i_i_fu_511_p1));

assign d_fu_465_p2 = (cj_reg_255 + 5'd1);

assign di_cast_i_i_fu_480_p1 = di_i_i_reg_279;

assign di_fu_629_p2 = ($signed(di_i_i_reg_279) + $signed(3'd1));

assign dj_cast_i_i_fu_511_p1 = dj_i_i_reg_303;

assign dj_fu_623_p2 = ($signed(dj_i_i_reg_303) + $signed(3'd1));

assign exitcond1_fu_734_p2 = ((i_assign_reg_314 == 8'd188) ? 1'b1 : 1'b0);

assign exitcond1_i_i_fu_484_p2 = ((di_i_i_reg_279 == 3'd3) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_393_p2 = ((j_i_reg_244 == 8'd225) ? 1'b1 : 1'b0);

assign exitcond3_i_fu_373_p2 = ((ni_reg_220 == 8'd188) ? 1'b1 : 1'b0);

assign exitcond_fu_765_p2 = ((j_assign_reg_336 == 8'd225) ? 1'b1 : 1'b0);

assign exitcond_i_fu_459_p2 = ((cj_reg_255 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_515_p2 = ((dj_i_i_reg_303 == 3'd3) ? 1'b1 : 1'b0);

assign grp_comp_disps_fu_347_ap_start = grp_comp_disps_fu_347_ap_start_reg;

assign i_1_fu_379_p2 = (ni_reg_220 + 8'd1);

assign i_fu_740_p2 = (i_assign_reg_314 + 8'd1);

assign j_1_fu_399_p2 = (j_i_reg_244 + 8'd1);

assign j_cast5_i_fu_385_p1 = j_i_reg_244;

assign j_cast_i_fu_389_p1 = j_i_reg_244;

assign j_fu_771_p2 = (j_assign_reg_336 + 8'd1);

assign l_cast_i_i_fu_658_p1 = IMG_BUS_addr_1_read_reg_911;

assign left_m_img_sum_cast_fu_589_p1 = $signed(left_m_img_sum_fu_584_p2);

assign left_m_img_sum_fu_584_p2 = ($signed(tmp_1_i_i_cast_fu_580_p1) + $signed(tmp_3_cast_reg_793));

assign li_cast_i_i_fu_476_p1 = ni_reg_220;

assign next_mul1_fu_728_p2 = (phi_mul1_reg_325 + 16'd225);

assign next_mul_fu_367_p2 = (phi_mul_reg_232 + 16'd225);

assign nj_fu_471_p2 = (j_cast_i_reg_811 - cj_cast1_i_fu_455_p1);

assign p_shl1_cast_i_fu_431_p1 = p_shl1_i_fu_423_p3;

assign p_shl1_i_fu_423_p3 = {{ci_fu_405_p2}, {1'd0}};

assign p_shl_cast_i_fu_419_p1 = p_shl_i_fu_411_p3;

assign p_shl_i_fu_411_p3 = {{ci_fu_405_p2}, {5'd0}};

assign r_cast_i_i_fu_661_p1 = IMG_BUS_addr_2_read_reg_916;

assign rev1_fu_647_p2 = (tmp_10_fu_639_p3 ^ 1'd1);

assign rev_fu_552_p2 = (tmp_9_fu_544_p3 ^ 1'd1);

assign right_m_img_sum_cast_fu_613_p1 = $signed(right_m_img_sum_fu_608_p2);

assign right_m_img_sum_fu_608_p2 = ($signed(tmp_4_i_i_cast_fu_604_p1) + $signed(tmp_2_cast_reg_788));

assign sel_tmp_i_i_fu_707_p2 = (tmp4_i_i_fu_702_p2 & rev1_fu_647_p2);

assign sum_1_fu_713_p3 = ((sel_tmp_i_i_fu_707_p2[0:0] === 1'b1) ? sum_fu_696_p2 : sum_1_i_i_reg_291);

assign sum_2_fu_721_p3 = ((tmp_8_i_i_i_8_reg_883[0:0] === 1'b1) ? sum_1_fu_713_p3 : sum_1_i_i_reg_291);

assign sum_fu_696_p2 = ($signed(sum_1_i_i_reg_291) + $signed(a_assign_1_cast_i_i_fu_692_p1));

assign tmp4_i_i_fu_702_p2 = (tmp_8_i_i_i_8_reg_883 & tmp_8_i5_i_i_fu_653_p2);

assign tmp_10_fu_639_p3 = tmp_i1_i_i_fu_635_p2[32'd8];

assign tmp_11_fu_670_p3 = a_assign_i_i_fu_664_p2[32'd8];

assign tmp_1_cast_fu_355_p1 = $signed(disp_out);

assign tmp_1_i_i_cast_fu_580_p1 = $signed(tmp_i_i_9_fu_575_p2);

assign tmp_2_cast_fu_359_p1 = $signed(img_right);

assign tmp_3_cast_fu_363_p1 = $signed(img_left);

assign tmp_3_i_i_fu_599_p2 = ($signed(crj_cast5_i_i_fu_535_p1) + $signed(tmp_9_i_i_reg_868));

assign tmp_4_fu_750_p2 = ($signed(tmp_fu_746_p1) + $signed(tmp_1_cast_reg_783));

assign tmp_4_i9_fu_435_p2 = (p_shl_cast_i_fu_419_p1 - p_shl1_cast_i_fu_431_p1);

assign tmp_4_i_i_cast_fu_604_p1 = $signed(tmp_3_i_i_fu_599_p2);

assign tmp_5_fu_755_p1 = $signed(tmp_4_fu_750_p2);

assign tmp_6_fu_441_p1 = $signed(tmp_4_i9_reg_825);

assign tmp_7_fu_444_p1 = $unsigned(tmp_6_fu_441_p1);

assign tmp_7_i_i_i_fu_499_p2 = (($signed(cli_fu_490_p2) < $signed(9'd188)) ? 1'b1 : 1'b0);

assign tmp_8_fu_777_p2 = IMG_BUS_addr_read_reg_954 << 8'd3;

assign tmp_8_i5_i_i_fu_653_p2 = (($signed(crj_reg_877) < $signed(9'd225)) ? 1'b1 : 1'b0);

assign tmp_8_i_i_i_8_fu_569_p2 = (tmp_i_i_fu_564_p2 & rev_fu_552_p2);

assign tmp_8_i_i_i_fu_558_p2 = (($signed(clj_fu_521_p2) < $signed(9'd225)) ? 1'b1 : 1'b0);

assign tmp_9_fu_544_p3 = tmp_i_i_i_fu_539_p2[32'd8];

assign tmp_9_i_i_fu_505_p0 = cli_fu_490_p2;

assign tmp_9_i_i_fu_505_p2 = ($signed(tmp_9_i_i_fu_505_p0) * $signed('hE1));

assign tmp_fu_746_p1 = phi_mul1_reg_325;

assign tmp_i1_i_i_fu_635_p2 = (crj_reg_877 | cli_reg_857);

assign tmp_i8_i_i_fu_678_p2 = (9'd0 - a_assign_i_i_fu_664_p2);

assign tmp_i_i_9_fu_575_p2 = ($signed(clj_cast6_i_i_fu_526_p1) + $signed(tmp_9_i_i_reg_868));

assign tmp_i_i_fu_564_p2 = (tmp_8_i_i_i_fu_558_p2 & tmp_7_i_i_i_reg_863);

assign tmp_i_i_i_fu_539_p2 = (clj_fu_521_p2 | cli_reg_857);

always @ (posedge ap_clk) begin
    j_cast_i_reg_811[8] <= 1'b0;
    tmp_4_i9_reg_825[0] <= 1'b0;
    li_cast_i_i_reg_849[8] <= 1'b0;
end

endmodule //comp_d_map
